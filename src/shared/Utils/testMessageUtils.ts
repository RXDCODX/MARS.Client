import {
  ChatMessage,
  ChatMessageNoisyEnum,
  ChatMessageUserTypeEnum,
} from "../../shared/api/generated/Api";

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
export function createTestMessage(
  id: string,
  message: string,
  displayName: string,
  colorHex: string,
  isVip: boolean = false,
  isModerator: boolean = false,
  isBroadcaster: boolean = false,
): ChatMessage {
  return {
    id,
    message,
    displayName,
    colorHex,
    isVip,
    isModerator,
    isBroadcaster,
    badgeInfo: undefined,
    badges: undefined,
    bits: 0,
    bitsInDollars: 0,
    botUsername: undefined,
    channel: undefined,
    chatReply: undefined,
    cheerBadge: undefined,
    color: {
      a: 255,
      b: 0,
      g: 0,
      r: 255,
      isEmpty: false,
      isKnownColor: true,
      isNamedColor: false,
      isSystemColor: false,
      name: "Red",
    },
    customRewardId: undefined,
    emoteReplacedMessage: undefined,
    emoteSet: undefined,
    isFirstMessage: false,
    isHighlighted: false,
    isMe: false,
    isPartner: false,
    isSkippingSubMode: false,
    isStaff: false,
    isSubscriber: false,
    isTurbo: false,
    noisy: ChatMessageNoisyEnum.False,
    rawIrcMessage: undefined,
    roomId: undefined,
    subscribedMonthCount: 0,
    tmiSentTs: undefined,
    userId: undefined,
    userType: ChatMessageUserTypeEnum.Viewer,
    username: undefined,
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
export function createTestMessageSet(
  prefix: string,
  startIndex: number,
): ChatMessage[] {
  return [
    createTestMessage(
      `${prefix}-${startIndex}`,
      "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã",
      "User1",
      "#ff0000",
    ),
    createTestMessage(
      `${prefix}-${startIndex + 1}`,
      "–ö–∞–∫ –¥–µ–ª–∞?",
      "User2",
      "#00ff00",
      true,
    ),
    createTestMessage(
      `${prefix}-${startIndex + 2}`,
      "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç—Ä–∏–º!",
      "Moderator",
      "#0000ff",
      false,
      true,
    ),
    createTestMessage(
      `${prefix}-${startIndex + 3}`,
      "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Ç—Ä–∏–º! üéÆ",
      "Broadcaster",
      "#ffff00",
      false,
      false,
      true,
    ),
  ];
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function createFastTestMessageSet(
  prefix: string,
  startIndex: number,
): ChatMessage[] {
  return [
    createTestMessage(
      `${prefix}-${startIndex}`,
      "–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚ö°",
      "FastUser",
      "#ff6600",
    ),
    createTestMessage(
      `${prefix}-${startIndex + 1}`,
      "–ï—â–µ –æ–¥–Ω–æ! üöÄ",
      "SpeedUser",
      "#ff0066",
      true,
    ),
    createTestMessage(
      `${prefix}-${startIndex + 2}`,
      "–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üéØ",
      "ThirdUser",
      "#00ffff",
      false,
      true,
    ),
  ];
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function createDemoTestMessageSet(
  prefix: string,
  startIndex: number,
): ChatMessage[] {
  return [
    createTestMessage(
      `${prefix}-${startIndex}`,
      "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã",
      "User1",
      "#ff0000",
    ),
    createTestMessage(
      `${prefix}-${startIndex + 1}`,
      "–ö–∞–∫ –¥–µ–ª–∞?",
      "User2",
      "#00ff00",
      true,
    ),
    createTestMessage(
      `${prefix}-${startIndex + 2}`,
      "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç—Ä–∏–º!",
      "Moderator",
      "#0000ff",
      false,
      true,
    ),
  ];
}
