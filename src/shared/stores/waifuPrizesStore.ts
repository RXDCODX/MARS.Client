import type {} from "@redux-devtools/extension";
import { PrizeType } from "react-roulette-pro";
import { create } from "zustand";
import { devtools } from "zustand/middleware";

interface Actions {
  addPrizes: (prizes: PrizeType[]) => void;
  shuffle: () => void;
  clear: () => void;
  preloadImages: (prizes: PrizeType[]) => void;
}

interface State {
  prizes: PrizeType[];
}

const initialState: State = {
  prizes: [],
};

/**
 * Store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞–º–∏ —Ä—É–ª–µ—Ç–∫–∏ –≤–∞–π—Ñ—É
 */
export const useWaifuPrizesStore = create<State & Actions>()(
  devtools(
    (set, get) => ({
      ...initialState,

      /**
       * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏–∑—ã, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
       */
      addPrizes: (newPrizes: PrizeType[]) => {
        debugger; // eslint-disable-line no-debugger
        const currentPrizes = get().prizes;

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–∏–∑—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º –º–∞—Å—Å–∏–≤–µ
        const prizesToAdd = newPrizes.filter(
          newPrize =>
            !currentPrizes.some(existing => existing.id === newPrize.id)
        );

        console.log("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –≤ store:", {
          —Ç–µ–∫—É—â–µ–µ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: currentPrizes.length,
          –Ω–æ–≤—ã—Ö–ü—Ä–∏–∑–æ–≤: newPrizes.length,
          –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è: prizesToAdd.length,
          –∏—Ç–æ–≥–æ–ü–æ—Å–ª–µ: currentPrizes.length + prizesToAdd.length,
          –ø–µ—Ä–≤—ã–π–ù–æ–≤—ã–π–ü—Ä–∏–∑: prizesToAdd[0]?.id,
        });

        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º state
        if (prizesToAdd.length === 0) {
          console.log("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è");
          return;
        }

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–æ–≤
        prizesToAdd.forEach(prize => {
          if (prize.image) {
            const img = new Image();
            img.src = prize.image;
          }
        });

        debugger; // eslint-disable-line no-debugger
        set({ prizes: [...currentPrizes, ...prizesToAdd] });

        console.log("‚úÖ –ü—Ä–∏–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ –ø—Ä–∏–∑–æ–≤:", get().prizes.length);
      },

      /**
       * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –ø—Ä–∏–∑—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
       */
      shuffle: () => {
        debugger; // eslint-disable-line no-debugger
        const currentPrizes = get().prizes;
        const shuffled = [...currentPrizes].sort(() => Math.random() - 0.5);

        console.log("üîÄ –ü—Ä–∏–∑—ã –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã:", shuffled.length);

        set({ prizes: shuffled });
      },

      /**
       * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–∑—ã
       */
      clear: () => {
        debugger; // eslint-disable-line no-debugger
        console.log("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–∑–æ–≤");
        set({ prizes: [] });
      },

      /**
       * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤
       */
      preloadImages: (prizes: PrizeType[]) => {
        prizes.forEach(prize => {
          if (prize.image) {
            const img = new Image();
            img.src = prize.image;
          }
        });
      },
    }),
    { name: "WaifuPrizesStore" }
  )
);

export default useWaifuPrizesStore;
