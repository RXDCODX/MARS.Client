import type { Meta, StoryObj } from "@storybook/react-vite";
import { expect } from "storybook/test";

import {
    ChatMessage,
    ChatMessageNoisyEnum,
    ChatMessageUserTypeEnum,
} from "../../../shared/api/generated/Api";
import { Message } from "./Message";

const meta: Meta<typeof Message> = {
  title: "Chat/ChatHorizontal/Message",
  component: Message,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "–û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —ç–∫—Ä–∞–Ω—É.",
      },
    },
  },
  tags: ["autodocs"],
  argTypes: {
    message: {
      control: "object",
    },
    callback: {
      action: "message removed",
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

const defaultMessage: ChatMessage = {
  id: "1",
  message: "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã",
  displayName: "TestUser",
  colorHex: "#ff0000",
  isVip: false,
  isModerator: false,
  isBroadcaster: false,
  badgeInfo: undefined,
  badges: undefined,
  bits: 0,
  bitsInDollars: 0,
  botUsername: undefined,
  channel: undefined,
  chatReply: undefined,
  cheerBadge: undefined,
  color: {
    a: 255,
    b: 0,
    g: 0,
    r: 255,
    isEmpty: false,
    isKnownColor: true,
    isNamedColor: false,
    isSystemColor: false,
    name: "Red",
  },
  customRewardId: undefined,
  emoteReplacedMessage: undefined,
  emoteSet: undefined,
  isFirstMessage: false,
  isHighlighted: false,
  isMe: false,
  isPartner: false,
  isSkippingSubMode: false,
  isStaff: false,
  isSubscriber: false,
  isTurbo: false,
  noisy: ChatMessageNoisyEnum.False,
  rawIrcMessage: undefined,
  roomId: undefined,
  subscribedMonthCount: 0,
  tmiSentTs: undefined,
  userId: undefined,
  userType: ChatMessageUserTypeEnum.Viewer,
  username: undefined,
};

export const Default: Story = {
  args: {
    message: defaultMessage,
    callback: () => console.log("Message removed"),
  },
  play: async ({ canvasElement }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise((resolve) => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è
    expect(canvasElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageElement = canvasElement.querySelector('[class*="message"]');
    expect(messageElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫–Ω–µ–π–º
    const nickname = messageElement?.querySelector('[class*="nickname"]');
    expect(nickname).toBeInTheDocument();
    expect(nickname).toHaveTextContent("TestUser:");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = messageElement?.querySelector('[class*="text"]');
    expect(text).toBeInTheDocument();
    expect(text).toHaveTextContent("–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    const computedStyle = window.getComputedStyle(messageElement!);
    expect(computedStyle.position).toBe("absolute");
    expect(computedStyle.fontSize).toBeDefined();
  },
};

export const VIPUser: Story = {
  args: {
    message: {
      ...defaultMessage,
      displayName: "VIPUser",
      colorHex: "#00ff00",
      isVip: true,
      message: "VIP —Å–æ–æ–±—â–µ–Ω–∏–µ! üíé",
    },
    callback: () => console.log("VIP message removed"),
  },
  play: async ({ canvasElement }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise((resolve) => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP —Å—Ç–∞—Ç—É—Å
    const messageElement = canvasElement.querySelector('[class*="message"]');
    expect(messageElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫–Ω–µ–π–º VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nickname = messageElement?.querySelector('[class*="nickname"]');
    expect(nickname).toHaveTextContent("VIPUser:");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const nicknameStyle = window.getComputedStyle(nickname!);
    expect(nicknameStyle.color).toBe("rgb(0, 255, 0)");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç VIP —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = messageElement?.querySelector('[class*="text"]');
    expect(text).toHaveTextContent("VIP —Å–æ–æ–±—â–µ–Ω–∏–µ! üíé");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω –¥–ª—è VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const messageStyle = window.getComputedStyle(messageElement!);
    expect(messageStyle.background).toContain("linear-gradient");
  },
};

export const Moderator: Story = {
  args: {
    message: {
      ...defaultMessage,
      displayName: "Moderator",
      colorHex: "#0000ff",
      isModerator: true,
      message: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üõ°Ô∏è",
    },
    callback: () => console.log("Moderator message removed"),
  },
  play: async ({ canvasElement }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise((resolve) => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
    const messageElement = canvasElement.querySelector('[class*="message"]');
    expect(messageElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫–Ω–µ–π–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const nickname = messageElement?.querySelector('[class*="nickname"]');
    expect(nickname).toHaveTextContent("Moderator:");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const nicknameStyle = window.getComputedStyle(nickname!);
    expect(nicknameStyle.color).toBe("rgb(0, 0, 255)");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const text = messageElement?.querySelector('[class*="text"]');
    expect(text).toHaveTextContent("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üõ°Ô∏è");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    const messageStyle = window.getComputedStyle(messageElement!);
    expect(messageStyle.background).toContain("linear-gradient");
  },
};

export const Broadcaster: Story = {
  args: {
    message: {
      ...defaultMessage,
      displayName: "Broadcaster",
      colorHex: "#ffff00",
      isBroadcaster: true,
      message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞! üéÆ",
    },
    callback: () => console.log("Broadcaster message removed"),
  },
  play: async ({ canvasElement }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise((resolve) => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–µ—Ä–∞
    const messageElement = canvasElement.querySelector('[class*="message"]');
    expect(messageElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∫–Ω–µ–π–º —Å—Ç—Ä–∏–º–µ—Ä–∞
    const nickname = messageElement?.querySelector('[class*="nickname"]');
    expect(nickname).toHaveTextContent("Broadcaster:");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞
    const nicknameStyle = window.getComputedStyle(nickname!);
    expect(nicknameStyle.color).toBe("rgb(255, 255, 0)");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–∏–º–µ—Ä–∞
    const text = messageElement?.querySelector('[class*="text"]');
    expect(text).toHaveTextContent("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞! üéÆ");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
    const messageStyle = window.getComputedStyle(messageElement!);
    expect(messageStyle.background).toContain("linear-gradient");
  },
};
