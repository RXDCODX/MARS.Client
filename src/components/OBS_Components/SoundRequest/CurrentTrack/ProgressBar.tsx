import { useEffect, useRef, useState } from "react";

import { TunaMusicData } from "@/shared/api";

import styles from "./CurrentTrack.module.scss";

interface Props {
  track: TunaMusicData;
}

export const ProgressBar = ({ track }: Props) => {
  const [progress, setProgress] = useState(0);
  const animationRef = useRef<number | null>(null);
  const startTimeRef = useRef<number>(0);
  const pausedTimeRef = useRef<number>(0);
  const isPausedRef = useRef<boolean>(false);
  const lastTrackKeyRef = useRef<string>("");
  const lastExternalProgressRef = useRef<number>(0);

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç—Ä–µ–∫–∞
  const trackKey = `${track.artists.join(",")}-${track.title}-${track.duration}`;

  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  useEffect(() => {
    if (!track.duration || track.duration === 0) return;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const externalProgressSeconds = track.progress || 0;
    const externalProgress =
      track.duration > 0 ? externalProgressSeconds / track.duration : 0;
    const lastProgress = lastExternalProgressRef.current;
    const progressDiff = externalProgress - lastProgress;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥ (–ø–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 3+ —Å–µ–∫—É–Ω–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    const isSignificantForwardJump = progressDiff > 3 / track.duration;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–∞–¥ (–ø–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ 3+ —Å–µ–∫—É–Ω–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    const isSignificantBackwardJump = progressDiff < -(3 / track.duration);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (–±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    const isRapidChange = Math.abs(progressDiff) > 1 / track.duration;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–º–æ—Ç–∫–∏ –Ω–∞–∑–∞–¥ - –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–∑–∫–æ —É–º–µ–Ω—å—à–∏–ª—Å—è
    const isRewindBack =
      progressDiff < -(0.5 / track.duration) && externalProgress < lastProgress;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–Ω–µ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Ç—Ä–µ–∫–∞)
    const isReasonableChange = Math.abs(progressDiff) < 0.5;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (Math.abs(progressDiff) > 0.01) {
      console.log("üü° PROGRESS CHANGE:", {
        externalProgressSeconds,
        externalProgress,
        lastProgress,
        progressDiff,
        isSignificantForwardJump,
        isSignificantBackwardJump,
        isRapidChange,
        isRewindBack,
        isReasonableChange,
        willSync:
          (isSignificantForwardJump ||
            isSignificantBackwardJump ||
            isRapidChange ||
            isRewindBack) &&
          isReasonableChange,
        trackStatus: track.status,
        currentInternalProgress: progress,
        trackDuration: track.duration,
      });
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–æ—Ç–∫–∞—Ö, —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏–ª–∏ –æ—Ç–º–æ—Ç–∫–µ –Ω–∞–∑–∞–¥
    if (
      (isSignificantForwardJump ||
        isSignificantBackwardJump ||
        isRapidChange ||
        isRewindBack) &&
      isReasonableChange
    ) {
      console.log("üü¢ SYNCING PROGRESS:", {
        from: progress,
        to: externalProgress,
        fromSeconds: progress * track.duration,
        toSeconds: externalProgressSeconds,
      });
      lastExternalProgressRef.current = externalProgress;
      setProgress(externalProgress);

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      if (track.status === "playing") {
        startTimeRef.current = Date.now() - externalProgressSeconds * 1000;
      }
    } else {
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      // –Ω–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–∏–∫–æ–≤
      lastExternalProgressRef.current = externalProgress;
    }
  }, [track.progress, track.duration, track.status, progress]);

  useEffect(() => {
    if (!track.duration || track.duration === 0) {
      setProgress(0);
      lastExternalProgressRef.current = 0;
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (lastTrackKeyRef.current !== trackKey) {
      console.log("üü† NEW TRACK DETECTED:", {
        oldTrackKey: lastTrackKeyRef.current,
        newTrackKey: trackKey,
        initialProgress: track.progress || 0,
        trackStatus: track.status,
        trackDuration: track.duration,
      });

      lastTrackKeyRef.current = trackKey;
      const initialProgressSeconds = track.progress || 0;
      const initialProgress =
        track.duration > 0 ? initialProgressSeconds / track.duration : 0;
      setProgress(initialProgress);
      lastExternalProgressRef.current = initialProgress;
      isPausedRef.current = false;
      pausedTimeRef.current = 0;
      startTimeRef.current = Date.now() - initialProgressSeconds * 1000;
    }

    // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    if (track.status === "stopped") {
      console.log("üî¥ TRACK STOPPED - resetting progress");
      setProgress(0);
      lastExternalProgressRef.current = 0;
      isPausedRef.current = false;
      pausedTimeRef.current = 0;
      return;
    }

    // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–∞ –ø–∞—É–∑–µ
    if (track.status === "paused") {
      if (!isPausedRef.current) {
        console.log("‚è∏Ô∏è TRACK PAUSED");
        isPausedRef.current = true;
        pausedTimeRef.current = Date.now();
      }
      return;
    }

    // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –∏–≥—Ä–∞–µ—Ç
    if (track.status === "playing") {
      // –ï—Å–ª–∏ –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
      if (isPausedRef.current) {
        const pauseDuration = Date.now() - pausedTimeRef.current;
        console.log("‚ñ∂Ô∏è TRACK RESUMED after pause:", { pauseDuration });
        startTimeRef.current += pauseDuration;
        isPausedRef.current = false;
      }

      const animate = () => {
        const currentTime = Date.now();
        const elapsed = (currentTime - startTimeRef.current) / 1000;
        const newProgress = Math.min(elapsed / track.duration, 1);

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (Math.abs(newProgress - progress) > 0.01) {
          console.log("üîµ ANIMATION PROGRESS:", {
            newProgress,
            newProgressSeconds: newProgress * track.duration,
            currentProgress: progress,
            currentProgressSeconds: progress * track.duration,
            elapsed,
            trackDuration: track.duration,
            trackStatus: track.status,
            startTime: startTimeRef.current,
            currentTime,
          });
        }

        setProgress(newProgress);

        if (newProgress < 1 && track.status === "playing") {
          animationRef.current = requestAnimationFrame(animate);
        }
      };

      animationRef.current = requestAnimationFrame(animate);
    }

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [track.status, track.duration, trackKey, track.progress, progress]);

  // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(
    () => () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    },
    []
  );

  const progressPercentage = Math.min(progress * 100, 100);

  useEffect(() => {
    if (progressPercentage >= 99) {
      console.log("üî¥ PROGRESS BAR DEBUG - 99%+ reached:", {
        progressPercentage,
        progress,
        trackStatus: track.status,
        trackDuration: track.duration,
        externalProgressSeconds: track.progress,
        externalProgressPercent:
          track.duration > 0 ? (track.progress || 0) / track.duration : 0,
        lastExternalProgress: lastExternalProgressRef.current,
        isPaused: isPausedRef.current,
        startTime: startTimeRef.current,
        currentTime: Date.now(),
        elapsed: (Date.now() - startTimeRef.current) / 1000,
        trackKey,
        lastTrackKey: lastTrackKeyRef.current,
      });
    }
  }, [
    progressPercentage,
    progress,
    track.status,
    track.duration,
    track.progress,
    trackKey,
  ]);

  return (
    <div
      className={styles.progressBarContainer}
      style={
        {
          "--track-progress": `${progressPercentage}%`,
        } as React.CSSProperties
      }
    />
  );
};
