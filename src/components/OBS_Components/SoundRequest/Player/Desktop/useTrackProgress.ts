import { useEffect, useRef, useState } from "react";

interface UseTrackProgressProps {
  durationSec: number;
  isPlaying: boolean;
  trackId?: string;
  initialProgress?: string; // ISO 8601 duration —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PT30S)
}

/**
 * –ü–∞—Ä—Å–∏—Ç ISO 8601 duration —Å—Ç—Ä–æ–∫—É (PT30S) –≤ —Å–µ–∫—É–Ω–¥—ã
 */
function parseDurationToSeconds(duration?: string): number {
  if (!duration) return 0;
  try {
    // –ü–∞—Ä—Å–∏–º ISO 8601 duration —Ñ–æ—Ä–º–∞—Ç: PT1H2M3S
    const match = duration.match(
      /PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?/
    );
    if (!match) return 0;

    const hours = parseFloat(match[1] || "0");
    const minutes = parseFloat(match[2] || "0");
    const seconds = parseFloat(match[3] || "0");

    return hours * 3600 + minutes * 60 + seconds;
  } catch {
    return 0;
  }
}

export function useTrackProgress({
  durationSec,
  isPlaying,
  trackId,
  initialProgress,
}: UseTrackProgressProps) {
  const [progress, setProgress] = useState(0);
  const startTimeRef = useRef<number>(0);
  const pausedAtRef = useRef<number>(0);
  const wasPausedRef = useRef<boolean>(false);
  const rafRef = useRef<number | null>(null);
  const lastExternalProgressRef = useRef<number>(0);
  const lastTrackKeyRef = useRef<string>("");

  // Reset/start progress when track changes
  useEffect(() => {
    if (!trackId || !durationSec) {
      setProgress(0);
      lastExternalProgressRef.current = 0;
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (lastTrackKeyRef.current !== trackId) {
      console.log("üü† [useTrackProgress] NEW TRACK DETECTED:", {
        oldTrackKey: lastTrackKeyRef.current,
        newTrackKey: trackId,
        initialProgress,
        durationSec,
      });

      lastTrackKeyRef.current = trackId;

      // –ü–∞—Ä—Å–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const initialProgressSec = parseDurationToSeconds(initialProgress);
      const initialProgressRatio =
        durationSec > 0 ? initialProgressSec / durationSec : 0;

      setProgress(initialProgressRatio);
      lastExternalProgressRef.current = initialProgressRatio;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º startTime —Å —É—á–µ—Ç–æ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      startTimeRef.current = Date.now() - initialProgressSec * 1000;

      wasPausedRef.current = false;
      pausedAtRef.current = 0;

      if (initialProgressSec > 0) {
        console.log(
          `[useTrackProgress] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: ${initialProgressSec}s (${(initialProgressRatio * 100).toFixed(1)}%)`
        );
      }
    }
  }, [trackId, durationSec, initialProgress]);

  // –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (–∫–∞–∫ –≤ ProgressBar.tsx)
  useEffect(() => {
    if (!durationSec || durationSec === 0 || !trackId) return;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ ISO 8601 –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    const externalProgressSeconds = parseDurationToSeconds(initialProgress);
    const externalProgress =
      durationSec > 0 ? externalProgressSeconds / durationSec : 0;
    const lastProgress = lastExternalProgressRef.current;
    const progressDiff = externalProgress - lastProgress;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥ (–ø–µ—Ä–µ–º–æ—Ç–∫–∞ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 3+ —Å–µ–∫—É–Ω–¥)
    const isSignificantForwardJump = progressDiff > 3 / durationSec;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–∞–¥ (–ø–µ—Ä–µ–º–æ—Ç–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ 3+ —Å–µ–∫—É–Ω–¥)
    const isSignificantBackwardJump = progressDiff < -(3 / durationSec);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (–±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã)
    const isRapidChange = Math.abs(progressDiff) > 1 / durationSec;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–º–æ—Ç–∫–∏ –Ω–∞–∑–∞–¥
    const isRewindBack =
      progressDiff < -(0.5 / durationSec) && externalProgress < lastProgress;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–Ω–µ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Ç—Ä–µ–∫–∞)
    const isReasonableChange = Math.abs(progressDiff) < 0.5;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (Math.abs(progressDiff) > 0.01) {
      console.log("üü° [useTrackProgress] PROGRESS CHANGE:", {
        externalProgressSeconds,
        externalProgress,
        lastProgress,
        progressDiff,
        isSignificantForwardJump,
        isSignificantBackwardJump,
        isRapidChange,
        isRewindBack,
        isReasonableChange,
        willSync:
          (isSignificantForwardJump ||
            isSignificantBackwardJump ||
            isRapidChange ||
            isRewindBack) &&
          isReasonableChange,
        isPlaying,
        currentInternalProgress: progress,
        durationSec,
      });
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–æ—Ç–∫–∞—Ö, —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏–ª–∏ –æ—Ç–º–æ—Ç–∫–µ –Ω–∞–∑–∞–¥
    if (
      (isSignificantForwardJump ||
        isSignificantBackwardJump ||
        isRapidChange ||
        isRewindBack) &&
      isReasonableChange
    ) {
      console.log("üü¢ [useTrackProgress] SYNCING PROGRESS:", {
        from: progress,
        to: externalProgress,
        fromSeconds: progress * durationSec,
        toSeconds: externalProgressSeconds,
      });
      lastExternalProgressRef.current = externalProgress;
      setProgress(externalProgress);

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      if (isPlaying) {
        startTimeRef.current = Date.now() - externalProgressSeconds * 1000;
      }
    } else if (Math.abs(progressDiff) > 0.01) {
      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      // –Ω–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—Ä–æ–∂–∞–Ω–∏—è
      lastExternalProgressRef.current = externalProgress;
    }
  }, [initialProgress, durationSec, isPlaying, progress, trackId]);

  // Drive progress animation
  useEffect(() => {
    if (!trackId || !durationSec) return;

    const loop = () => {
      const currentTime = Date.now();
      const elapsedSec = (currentTime - startTimeRef.current) / 1000;
      const pr = Math.min(elapsedSec / durationSec, 1);

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ)
      if (Math.abs(pr - progress) > 0.01) {
        console.log("üîµ [useTrackProgress] ANIMATION PROGRESS:", {
          newProgress: pr,
          newProgressSeconds: pr * durationSec,
          currentProgress: progress,
          currentProgressSeconds: progress * durationSec,
          elapsed: elapsedSec,
          durationSec,
          isPlaying,
          startTime: startTimeRef.current,
          currentTime,
        });
      }

      setProgress(pr);

      if (pr < 1 && isPlaying) {
        rafRef.current = requestAnimationFrame(loop);
      }
    };

    if (isPlaying) {
      if (wasPausedRef.current) {
        const pauseDelta = Date.now() - pausedAtRef.current;
        console.log("‚ñ∂Ô∏è [useTrackProgress] TRACK RESUMED after pause:", {
          pauseDuration: pauseDelta,
        });
        startTimeRef.current += pauseDelta;
        wasPausedRef.current = false;
      }
      rafRef.current = requestAnimationFrame(loop);
    } else {
      if (!wasPausedRef.current && progress > 0) {
        console.log("‚è∏Ô∏è [useTrackProgress] TRACK PAUSED");
        wasPausedRef.current = true;
        pausedAtRef.current = Date.now();
      }
      if (rafRef.current) cancelAnimationFrame(rafRef.current);
    }

    return () => {
      if (rafRef.current) cancelAnimationFrame(rafRef.current);
      rafRef.current = null;
    };
  }, [isPlaying, trackId, durationSec, progress]);

  // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(
    () => () => {
      if (rafRef.current) {
        cancelAnimationFrame(rafRef.current);
      }
    },
    []
  );

  // –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã (–±–ª–∏–∑–∫–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é)
  useEffect(() => {
    const progressPercentage = progress * 100;
    if (progressPercentage >= 99) {
      console.log("üî¥ [useTrackProgress] PROGRESS 99%+ reached:", {
        progressPercentage,
        progress,
        isPlaying,
        durationSec,
        externalProgressSeconds: parseDurationToSeconds(initialProgress),
        externalProgressPercent:
          durationSec > 0
            ? parseDurationToSeconds(initialProgress) / durationSec
            : 0,
        lastExternalProgress: lastExternalProgressRef.current,
        isPaused: wasPausedRef.current,
        startTime: startTimeRef.current,
        currentTime: Date.now(),
        elapsed: (Date.now() - startTimeRef.current) / 1000,
        trackId,
        lastTrackKey: lastTrackKeyRef.current,
      });
    }
  }, [progress, isPlaying, durationSec, initialProgress, trackId]);

  return progress;
}
