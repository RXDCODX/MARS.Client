import type { Meta, StoryObj } from '@storybook/react';
import { expect, userEvent, within } from '@storybook/test';
import { useState } from 'react';
import { Confettyv2 } from './Confetty';
import EmojiParticles from './EmojiParticles';
import Firework from './Firework';

// Wrapper –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TestWrapper = ({ children, onActivate }: { children: React.ReactNode; onActivate: () => void }) => (
  <div style={{ 
    width: '100vw', 
    height: '100vh', 
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    position: 'relative',
    overflow: 'hidden'
  }}>
    <button 
      id="activate-button"
      onClick={onActivate}
      style={{
        position: 'absolute',
        top: '20px',
        left: '20px',
        zIndex: 1000,
        padding: '10px 20px',
        backgroundColor: '#4CAF50',
        color: 'white',
        border: 'none',
        borderRadius: '5px',
        cursor: 'pointer',
        fontSize: '16px'
      }}
    >
      –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç
    </button>
    {children}
  </div>
);

const meta: Meta = {
  title: 'Particles/Effects',
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —á–∞—Å—Ç–∏—Ü.',
      },
    },
  },
  tags: ['autodocs'],
};

export default meta;

// Confetty Stories
export const ConfettyEffect: StoryObj = {
  render: () => {
    const [isActive, setIsActive] = useState(false);
    
    return (
      <TestWrapper onActivate={() => setIsActive(true)}>
        {isActive && (
          <Confettyv2 
            callback={() => setIsActive(false)} 
          />
        )}
      </TestWrapper>
    );
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const activateButton = canvas.getByRole('button', { name: /–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç/i });
    expect(activateButton).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    const confettiCanvas = canvasElement.querySelectorAll('canvas');
    expect(confettiCanvas.length).toBe(0);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await userEvent.click(activateButton);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è
    const activeConfettiCanvas = canvasElement.querySelectorAll('canvas');
    expect(activeConfettiCanvas.length).toBeGreaterThan(0);
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 10500));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    const finalCanvas = canvasElement.querySelectorAll('canvas');
    expect(finalCanvas.length).toBe(0);
  },
  parameters: {
    docs: {
      description: {
        story: '–≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ —Å —Ä–∞–¥—É–∂–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.',
      },
    },
  },
};

// Firework Stories
export const FireworkEffect: StoryObj = {
  render: () => {
    const [isActive, setIsActive] = useState(false);
    
    return (
      <TestWrapper onActivate={() => setIsActive(true)}>
        {isActive && (
          <Firework 
            callback={() => setIsActive(false)} 
          />
        )}
      </TestWrapper>
    );
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const activateButton = canvas.getByRole('button', { name: /–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç/i });
    expect(activateButton).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    const fireworkCanvas = canvasElement.querySelectorAll('canvas');
    expect(fireworkCanvas.length).toBe(0);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await userEvent.click(activateButton);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è
    const activeFireworkCanvas = canvasElement.querySelectorAll('canvas');
    expect(activeFireworkCanvas.length).toBeGreaterThan(0);
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 10500));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    const finalCanvas = canvasElement.querySelectorAll('canvas');
    expect(finalCanvas.length).toBe(0);
  },
  parameters: {
    docs: {
      description: {
        story: '–≠—Ñ—Ñ–µ–∫—Ç —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.',
      },
    },
  },
};

// EmojiParticles Stories
export const EmojiParticlesEffect: StoryObj = {
  render: () => {
    const [isActive, setIsActive] = useState(false);
    
    return (
      <TestWrapper onActivate={() => setIsActive(true)}>
        {isActive && (
          <EmojiParticles 
            input="üéâüéäüéà" 
          />
        )}
      </TestWrapper>
    );
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const activateButton = canvas.getByRole('button', { name: /–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç/i });
    expect(activateButton).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    const emojiCanvas = canvasElement.querySelectorAll('canvas');
    expect(emojiCanvas.length).toBe(0);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await userEvent.click(activateButton);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ (—ç–º–æ–¥–∑–∏ —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è
    const activeEmojiCanvas = canvasElement.querySelectorAll('canvas');
    expect(activeEmojiCanvas.length).toBeGreaterThan(0);
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 12000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    const finalCanvas = canvasElement.querySelectorAll('canvas');
    expect(finalCanvas.length).toBe(0);
  },
  parameters: {
    docs: {
      description: {
        story: '–≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü —ç–º–æ–¥–∑–∏. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.',
      },
    },
  },
}; 