import { CheckIcon, ExternalLinkIcon } from "@chakra-ui/icons";
import {
  Box,
  Button,
  Code,
  Container,
  Flex,
  Grid,
  GridItem,
  Heading,
  VStack,
  Text,
} from "@chakra-ui/react";
import { List } from "@chakra-ui/react";
import { useSiteColors } from "@/shared/Utils/useSiteColors";

import { useState } from "react";
import { Link } from "react-router-dom";

const DocsPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState("getting-started");

  const colors = useSiteColors();
  const bgPrimary = colors.background.primary;
  const bgSecondary = colors.background.secondary;
  const bgCard = colors.background.card;
  const textPrimary = colors.text.primary;
  const textSecondary = colors.text.secondary;
  const textAccent = colors.text.accent;
  const borderColor = colors.border.primary;

  const tabs = [
    { id: "getting-started", label: "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã" },
    { id: "obs-components", label: "OBS –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã" },
    { id: "admin-panel", label: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" },
    { id: "api", label: "API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è" },
  ];

  const obsComponents = [
    {
      name: "Pyro Alerts",
      path: "/pyroalerts",
      description: "–ö—Ä–∞—Å–∏–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–æ–∫",
      features: [
        "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏",
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º",
        "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–≤—É–∫–∏",
      ],
    },
    {
      name: "Waifu Alerts",
      path: "/waifu",
      description: "–ê–ª–µ—Ä—Ç—ã —Å –∞–Ω–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏",
      features: [
        "–ê–Ω–∏–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏",
        "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
        "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ä–µ–∞–∫—Ü–∏–∏",
      ],
    },
    {
      name: "Chat Horizontal",
      path: "/chath",
      description: "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —á–∞—Ç –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤",
      features: [
        "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π",
      ],
    },
    {
      name: "Chat Vertical",
      path: "/chatv",
      description: "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏",
      features: [
        "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "–ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏",
        "–ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
      ],
    },
    {
      name: "Fumo Friday",
      path: "/fumofriday",
      description: "–ü—è—Ç–Ω–∏—á–Ω—ã–µ —Ñ—É–º–æ –∞–Ω–∏–º–∞—Ü–∏–∏",
      features: ["–§—É–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏", "–ü—è—Ç–Ω–∏—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
    },
    {
      name: "Screen Particles",
      path: "/confetti",
      description: "–≠–∫—Ä–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —á–∞—Å—Ç–∏—Ü—ã",
      features: [
        "–ö–æ–Ω—Ñ–µ—Ç—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã",
        "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —á–∞—Å—Ç–∏—Ü—ã",
        "–¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π",
      ],
    },
  ];

  const renderGettingStarted = () => (
    <Box>
      <VStack spacing={6} align="stretch">
        <Heading as="h2" size="xl" color={textPrimary}>
          –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
        </Heading>
        <Text fontSize="lg" color={textSecondary}>
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é MARS Client! –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ–∂–µ—Ç –≤–∞–º
          –±—ã—Å—Ç—Ä–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.
        </Text>

        <Box
          bg={bgCard}
          p={6}
          borderRadius="xl"
          border="1px solid"
          borderColor={borderColor}
          shadow="md"
        >
          <Heading as="h3" size="md" mb={3} color={textPrimary}>
            –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞
          </Heading>
          <Text mb={3} color={textSecondary}>
            –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MARS Client –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.
          </Text>
          <Code p={3} borderRadius="md" bg={bgSecondary} color={textPrimary}>
            npm install mars-client
          </Code>
        </Box>

        <Box
          bg={bgCard}
          p={6}
          borderRadius="xl"
          border="1px solid"
          borderColor={borderColor}
          shadow="md"
        >
          <Heading as="h3" size="md" mb={3} color={textPrimary}>
            –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OBS
          </Heading>
          <Text mb={3} color={textSecondary}>
            –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ OBS Studio –∫–∞–∫ Browser Source.
          </Text>
          <Code p={3} borderRadius="md" bg={bgSecondary} color={textPrimary}>
            URL: http://localhost:3000/pyroalerts
          </Code>
        </Box>

        <Box
          bg={bgCard}
          p={6}
          borderRadius="xl"
          border="1px solid"
          borderColor={borderColor}
          shadow="md"
        >
          <Heading as="h3" size="md" mb={3} color={textPrimary}>
            –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </Heading>
          <Text mb={3} color={textSecondary}>
            –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
          </Text>
          <Button
            as={Link}
            to="/admin"
            colorScheme="blue"
            leftIcon={<ExternalLinkIcon />}
          >
            –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </Button>
        </Box>
      </VStack>
    </Box>
  );

  const renderObsComponents = () => (
    <Box>
      <VStack spacing={8} align="stretch">
        <Box>
          <Heading as="h2" size="xl" mb={3} color={textPrimary}>
            OBS –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
          </Heading>
          <Text fontSize="lg" color={textSecondary}>
            –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ OBS Studio.
          </Text>
        </Box>

        <Grid
          templateColumns={{
            base: "1fr",
            md: "repeat(2, 1fr)",
            lg: "repeat(3, 1fr)",
          }}
          gap={6}
        >
          {obsComponents.map((component, index) => (
            <GridItem key={index}>
              <Box
                bg={bgCard}
                p={6}
                borderRadius="xl"
                border="1px solid"
                borderColor={borderColor}
                shadow="md"
                h="100%"
                _hover={{ transform: "translateY(-2px)", shadow: "lg" }}
                transition="all 0.2s"
              >
                <VStack spacing={4} align="stretch" h="100%">
                  <Heading as="h3" size="md" color={textPrimary}>
                    {component.name}
                  </Heading>
                  <Text color={textSecondary} flex={1}>
                    {component.description}
                  </Text>
                  <List spacing={2}>
                    {component.features.map((feature, featureIndex) => (
                      <ListItem key={featureIndex} color={textSecondary}>
                        <ListIcon as={CheckIcon} color={textAccent} />
                        {feature}
                      </ListItem>
                    ))}
                  </List>
                  <Button
                    as={Link}
                    to={component.path}
                    colorScheme="blue"
                    variant="outline"
                    size="sm"
                    w="100%"
                  >
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
                  </Button>
                </VStack>
              </Box>
            </GridItem>
          ))}
        </Grid>
      </VStack>
    </Box>
  );

  const renderAdminPanel = () => (
    <Box>
      <VStack spacing={8} align="stretch">
        <Box>
          <Heading as="h2" size="xl" mb={3} color={textPrimary}>
            –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </Heading>
          <Text fontSize="lg" color={textSecondary}>
            –ú–æ—â–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –≤–∞—à–µ–≥–æ —Å—Ç—Ä–∏–º–∞.
          </Text>
        </Box>

        <Grid templateColumns={{ base: "1fr", md: "repeat(3, 1fr)" }} gap={6}>
          <GridItem>
            <Box
              bg={bgCard}
              p={6}
              borderRadius="xl"
              border="1px solid"
              borderColor={borderColor}
              shadow="md"
              textAlign="center"
            >
              <Text fontSize="4xl" mb={3}>
                üìä
              </Text>
              <Heading as="h3" size="md" mb={3} color={textPrimary}>
                –î–∞—à–±–æ—Ä–¥
              </Heading>
              <Text mb={4} color={textSecondary}>
                –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
              </Text>
              <Button
                as={Link}
                to="/dashboard"
                colorScheme="blue"
                size="sm"
                leftIcon={<ExternalLinkIcon />}
              >
                –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥
              </Button>
            </Box>
          </GridItem>

          <GridItem>
            <Box
              bg={bgCard}
              p={6}
              borderRadius="xl"
              border="1px solid"
              borderColor={borderColor}
              shadow="md"
              textAlign="center"
            >
              <Text fontSize="4xl" mb={3}>
                ‚öôÔ∏è
              </Text>
              <Heading as="h3" size="md" mb={3} color={textPrimary}>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </Heading>
              <Text mb={4} color={textSecondary}>
                –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.
              </Text>
              <Button
                as={Link}
                to="/admin"
                colorScheme="blue"
                size="sm"
                leftIcon={<ExternalLinkIcon />}
              >
                –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </Box>
          </GridItem>

          <GridItem>
            <Box
              bg={bgCard}
              p={6}
              borderRadius="xl"
              border="1px solid"
              borderColor={borderColor}
              shadow="md"
              textAlign="center"
            >
              <Text fontSize="4xl" mb={3}>
                üîß
              </Text>
              <Heading as="h3" size="md" mb={3} color={textPrimary}>
                –°–µ—Ä–≤–∏—Å—ã
              </Heading>
              <Text mb={4} color={textSecondary}>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ API.
              </Text>
              <Button
                as={Link}
                to="/services"
                colorScheme="blue"
                size="sm"
                leftIcon={<ExternalLinkIcon />}
              >
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
              </Button>
            </Box>
          </GridItem>
        </Grid>
      </VStack>
    </Box>
  );

  const renderApi = () => (
    <Box>
      <VStack spacing={8} align="stretch">
        <Box>
          <Heading as="h2" size="xl" mb={3} color={textPrimary}>
            API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
          </Heading>
          <Text fontSize="lg" color={textSecondary}>
            –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
          </Text>
        </Box>

        <Box
          bg={bgCard}
          p={6}
          borderRadius="xl"
          border="1px solid"
          borderColor={borderColor}
          shadow="md"
        >
          <VStack spacing={6} align="stretch">
            <Box>
              <Heading as="h3" size="md" mb={2} color={textPrimary}>
                –ë–∞–∑–æ–≤—ã–π URL
              </Heading>
              <Code
                p={3}
                borderRadius="md"
                bg={bgSecondary}
                color={textPrimary}
              >
                https://api.marsclient.com/v1
              </Code>
            </Box>

            <Box>
              <Heading as="h3" size="md" mb={2} color={textPrimary}>
                –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
              </Heading>
              <Text mb={2} color={textSecondary}>
                –í—Å–µ API –∑–∞–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:
              </Text>
              <Code
                p={3}
                borderRadius="md"
                bg={bgSecondary}
                color={textPrimary}
              >
                Authorization: Bearer YOUR_API_KEY
              </Code>
            </Box>

            <Divider />

            <Box>
              <Heading as="h3" size="md" mb={4} color={textPrimary}>
                –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
              </Heading>
              <VStack spacing={4} align="stretch">
                <Box>
                  <Heading as="h4" size="sm" mb={2} color={textPrimary}>
                    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
                  </Heading>
                  <Code
                    p={3}
                    borderRadius="md"
                    bg={bgSecondary}
                    color={textPrimary}
                    display="block"
                    whiteSpace="pre"
                  >
                    GET /alerts{`\n`}
                    Response: {`{`}
                    {`\n`}
                    &nbsp;&nbsp;"alerts": [...]{`\n`}
                    {`}`}
                  </Code>
                </Box>

                <Box>
                  <Heading as="h4" size="sm" mb={2} color={textPrimary}>
                    –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
                  </Heading>
                  <Code
                    p={3}
                    borderRadius="md"
                    bg={bgSecondary}
                    color={textPrimary}
                    display="block"
                    whiteSpace="pre"
                  >
                    POST /alerts{`\n`}
                    Body: {`{`}
                    {`\n`}
                    &nbsp;&nbsp;"type": "donation",{`\n`}
                    &nbsp;&nbsp;"message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç!"{`\n`}
                    {`}`}
                  </Code>
                </Box>
              </VStack>
            </Box>
          </VStack>
        </Box>
      </VStack>
    </Box>
  );

  const renderTabContent = () => {
    switch (activeTab) {
      case "getting-started":
        return renderGettingStarted();
      case "obs-components":
        return renderObsComponents();
      case "admin-panel":
        return renderAdminPanel();
      case "api":
        return renderApi();
      default:
        return renderGettingStarted();
    }
  };

  return (
    <Box bg={bgPrimary} minH="100vh">
      <Container maxW="container.xl" py={8}>
        <Flex direction={{ base: "column", lg: "row" }} gap={8} align="start">
          {/* Sidebar */}
          <Box
            w={{ base: "100%", lg: "250px" }}
            flexShrink={0}
            bg={bgCard}
            p={6}
            borderRadius="xl"
            border="1px solid"
            borderColor={borderColor}
            shadow="md"
          >
            <VStack spacing={6} align="stretch">
              <Heading as="h2" size="lg" color={textPrimary}>
                –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
              </Heading>
              <VStack spacing={2} align="stretch">
                {tabs.map(tab => (
                  <Button
                    key={tab.id}
                    variant={activeTab === tab.id ? "solid" : "ghost"}
                    colorScheme={activeTab === tab.id ? "blue" : "gray"}
                    justifyContent="start"
                    onClick={() => setActiveTab(tab.id)}
                    size="lg"
                  >
                    {tab.label}
                  </Button>
                ))}
              </VStack>
            </VStack>
          </Box>

          {/* Content */}
          <Box
            flex={1}
            bg={bgCard}
            p={8}
            borderRadius="xl"
            border="1px solid"
            borderColor={borderColor}
            shadow="md"
          >
            {renderTabContent()}
          </Box>
        </Flex>
      </Container>
    </Box>
  );
};

export default DocsPage;
