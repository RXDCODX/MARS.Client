import "./MediaInfoPage.scss";

import { useCallback, useEffect, useMemo, useState } from "react";
import { Link } from "react-router-dom";

import { ApiMediaInfo, MediaInfoApi } from "@/shared/api";

// –¢–∏–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
interface FilterOptions {
  type: string;
  priority: string;
  isLocalFile: boolean | null;
}

interface SortOptions {
  field:
    | keyof ApiMediaInfo
    | "metaInfo.displayName"
    | "metaInfo.duration"
    | "metaInfo.priority"
    | "fileInfo.type"
    | "fileInfo.filePath";
  direction: "asc" | "desc";
}

export const MediaInfoListPage: React.FC = () => {
  const [alerts, setAlerts] = useState<ApiMediaInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const [searchQuery, setSearchQuery] = useState("");
  const [filters, setFilters] = useState<FilterOptions>({
    type: "",
    priority: "",
    isLocalFile: null,
  });
  const [sortOptions, setSortOptions] = useState<SortOptions>({
    field: "metaInfo.displayName",
    direction: "asc",
  });
  const [itemsPerRow, setItemsPerRow] = useState(3); // 2, 3, 4 –≤ —Ä—è–¥

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
  const mediaInfoApi = useMemo(() => new MediaInfoApi(), []);

  const loadAlerts = useCallback(async () => {
    try {
      setLoading(true);
      const data = await mediaInfoApi.mediaInfoApiList();
      setAlerts(data.data as ApiMediaInfo[]);
      setError(null);
    } catch (err) {
      setError(
        err instanceof Error
          ? err.message
          : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"
      );
    } finally {
      setLoading(false);
    }
  }, [mediaInfoApi]);

  useEffect(() => {
    loadAlerts();
  }, [loadAlerts]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
  const filteredAlerts = useMemo(
    () =>
      alerts.filter(alert => {
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
        const searchLower = searchQuery.toLowerCase();
        const matchesSearch =
          alert.metaInfo.displayName?.toLowerCase().includes(searchLower) ||
          alert.fileInfo.fileName?.toLowerCase().includes(searchLower) ||
          alert.fileInfo.filePath?.toLowerCase().includes(searchLower) ||
          alert.textInfo.triggerWord?.toLowerCase().includes(searchLower);

        if (!matchesSearch) return false;

        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        if (filters.type && alert.fileInfo.type !== filters.type) return false;

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        if (filters.priority && alert.metaInfo.priority !== filters.priority)
          return false;

        // –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
        if (
          filters.isLocalFile !== null &&
          alert.fileInfo.isLocalFile !== filters.isLocalFile
        )
          return false;

        return true;
      }),
    [alerts, searchQuery, filters]
  );

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const sortedAlerts = useMemo(
    () =>
      [...filteredAlerts].sort((a, b) => {
        let aValue: unknown, bValue: unknown;

        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if (sortOptions.field === "metaInfo.displayName") {
          aValue = a.metaInfo.displayName || "";
          bValue = b.metaInfo.displayName || "";
        } else if (sortOptions.field === "metaInfo.duration") {
          aValue = a.metaInfo.duration || 0;
          bValue = b.metaInfo.duration || 0;
        } else if (sortOptions.field === "metaInfo.priority") {
          aValue = a.metaInfo.priority || "";
          bValue = b.metaInfo.priority || "";
        } else if (sortOptions.field === "fileInfo.type") {
          aValue = a.fileInfo.type || "";
          bValue = b.fileInfo.type || "";
        } else if (sortOptions.field === "fileInfo.filePath") {
          aValue = a.fileInfo.filePath || "";
          bValue = b.fileInfo.filePath || "";
        } else {
          aValue = a[sortOptions.field as keyof ApiMediaInfo];
          bValue = b[sortOptions.field as keyof ApiMediaInfo];
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if (typeof aValue === "string" && typeof bValue === "string") {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
        }

        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
        if (typeof aValue === "string" && typeof bValue === "string") {
          if (aValue < bValue) return sortOptions.direction === "asc" ? -1 : 1;
          if (aValue > bValue) return sortOptions.direction === "asc" ? 1 : -1;
        } else if (typeof aValue === "number" && typeof bValue === "number") {
          if (aValue < bValue) return sortOptions.direction === "asc" ? -1 : 1;
          if (aValue > bValue) return sortOptions.direction === "asc" ? 1 : -1;
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
          const aStr = String(aValue);
          const bStr = String(bValue);
          if (aStr < bStr) return sortOptions.direction === "asc" ? -1 : 1;
          if (aStr > bStr) return sortOptions.direction === "asc" ? 1 : -1;
        }
        return 0;
      }),
    [filteredAlerts, sortOptions]
  );

  const handleDeleteAlert = async (id: string) => {
    if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?")) {
      return;
    }

    try {
      await mediaInfoApi.mediaInfoApiDelete(id);
      setAlerts(prev => prev.filter(alert => alert.id !== id));
      setError(null);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"
      );
    }
  };

  const handleSort = (field: SortOptions["field"]) => {
    setSortOptions(prev => ({
      field,
      direction:
        prev.field === field && prev.direction === "asc" ? "desc" : "asc",
    }));
  };

  const clearFilters = () => {
    setSearchQuery("");
    setFilters({
      type: "",
      priority: "",
      isLocalFile: null,
    });
  };

  const getSortIcon = (field: SortOptions["field"]) => {
    if (sortOptions.field !== field) return "‚ÜïÔ∏è";
    return sortOptions.direction === "asc" ? "‚Üë" : "‚Üì";
  };

  if (loading) {
    return (
      <div className="media-info-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="media-info-page">
      <div className="page-header">
        <div className="header-content">
          <h1>üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏</h1>
          <p className="header-subtitle">
            –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {alerts.length} | –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ:{" "}
            {filteredAlerts.length}
          </p>
        </div>
        <div className="header-actions">
          <Link to="/media-info/create" className="btn btn-primary">
            <span>‚ûï</span> –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
          </Link>
        </div>
      </div>

      {error && (
        <div className="alert alert-danger">
          <div className="alert-icon">‚ö†Ô∏è</div>
          <div className="alert-content">
            <strong>–û—à–∏–±–∫–∞:</strong> {error}
          </div>
          <button className="btn-close" onClick={() => setError(null)}>
            √ó
          </button>
        </div>
      )}

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="control-panel">
        <div className="search-section">
          <div className="search-input-wrapper">
            <input
              type="text"
              className="search-input"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É, —Ç—Ä–∏–≥–≥–µ—Ä—É..."
              value={searchQuery}
              onChange={e => setSearchQuery(e.target.value)}
            />
            {searchQuery && (
              <button
                className="clear-search-btn"
                onClick={() => setSearchQuery("")}
                title="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
              >
                √ó
              </button>
            )}
          </div>
        </div>

        <div className="filters-section">
          <div className="filter-group">
            <label>–¢–∏–ø —Ñ–∞–π–ª–∞:</label>
            <select
              value={filters.type}
              onChange={e =>
                setFilters(prev => ({ ...prev, type: e.target.value }))
              }
              className="filter-select"
            >
              <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
              <option value="Image">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</option>
              <option value="Audio">–ê—É–¥–∏–æ</option>
              <option value="Video">–í–∏–¥–µ–æ</option>
              <option value="Gif">GIF</option>
            </select>
          </div>

          <div className="filter-group">
            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
            <select
              value={filters.priority}
              onChange={e =>
                setFilters(prev => ({ ...prev, priority: e.target.value }))
              }
              className="filter-select"
            >
              <option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
              <option value="Low">–ù–∏–∑–∫–∏–π</option>
              <option value="Normal">–û–±—ã—á–Ω—ã–π</option>
              <option value="High">–í—ã—Å–æ–∫–∏–π</option>
              <option value="Critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
            </select>
          </div>

          <div className="filter-group">
            <label>–õ–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å:</label>
            <select
              value={
                filters.isLocalFile === null
                  ? ""
                  : filters.isLocalFile.toString()
              }
              onChange={e => {
                const value = e.target.value;
                setFilters(prev => ({
                  ...prev,
                  isLocalFile: value === "" ? null : value === "true",
                }));
              }}
              className="filter-select"
            >
              <option value="">–í—Å–µ —Ñ–∞–π–ª—ã</option>
              <option value="true">–õ–æ–∫–∞–ª—å–Ω—ã–µ</option>
              <option value="false">–í–Ω–µ—à–Ω–∏–µ</option>
            </select>
          </div>

          <button
            className="clear-filters-btn"
            onClick={clearFilters}
            title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>

        <div className="display-settings">
          <div className="items-per-row">
            <label>–ê–ª–µ—Ä—Ç–æ–≤ –≤ —Ä—è–¥:</label>
            <div className="row-buttons">
              {[2, 3, 4].map(num => (
                <button
                  key={num}
                  className={`row-btn ${itemsPerRow === num ? "active" : ""}`}
                  onClick={() => setItemsPerRow(num)}
                >
                  {num}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
      <div className="table-headers">
        <div
          className="header-cell sortable"
          onClick={() => handleSort("fileInfo.filePath")}
        >
          –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É {getSortIcon("fileInfo.filePath")}
        </div>
        <div
          className="header-cell sortable"
          onClick={() => handleSort("fileInfo.type")}
        >
          –¢–∏–ø {getSortIcon("fileInfo.type")}
        </div>
        <div
          className="header-cell sortable"
          onClick={() => handleSort("metaInfo.duration")}
        >
          –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {getSortIcon("metaInfo.duration")}
        </div>
        <div
          className="header-cell sortable"
          onClick={() => handleSort("metaInfo.priority")}
        >
          –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {getSortIcon("metaInfo.priority")}
        </div>
        <div className="header-cell">–î–µ–π—Å—Ç–≤–∏—è</div>
      </div>

      <div className={`alerts-grid items-per-row-${itemsPerRow}`}>
        {sortedAlerts.length === 0 ? (
          <div className="no-results">
            <p>üîç –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            {searchQuery ||
              (Object.values(filters).some(f => f !== "" && f !== null) && (
                <button
                  className="btn btn-outline-primary"
                  onClick={clearFilters}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
              ))}
          </div>
        ) : (
          sortedAlerts.map(alert => (
            <div key={alert.id} className="alert-card">
              <div className="alert-header">
                <h3>{alert.fileInfo.filePath || "–ë–µ–∑ –ø—É—Ç–∏"}</h3>

                <div className="alert-actions">
                  <Link
                    to={`/media-info/edit/${alert.id}`}
                    className="btn btn-sm btn-outline-primary"
                  >
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Link>
                  <button
                    className="btn btn-sm btn-outline-danger"
                    onClick={() => handleDeleteAlert(alert.id)}
                  >
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>

              <div className="alert-details">
                <div className="detail-row">
                  <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong>
                  {alert.metaInfo.displayName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
                </div>
                <div className="detail-row">
                  <strong>–¢–∏–ø —Ñ–∞–π–ª–∞:</strong>
                  <span
                    className={`type-badge type-${alert.fileInfo.type.toLowerCase()}`}
                  >
                    {alert.fileInfo.type}
                  </span>
                </div>
                <div className="detail-row">
                  <strong>–ò–º—è —Ñ–∞–π–ª–∞:</strong> {alert.fileInfo.fileName}
                </div>
                <div className="detail-row">
                  <strong>–¢—Ä–∏–≥–≥–µ—Ä:</strong>{" "}
                  {alert.textInfo.triggerWord || "–ù–µ —É–∫–∞–∑–∞–Ω"}
                </div>
                <div className="detail-row">
                  <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {alert.metaInfo.duration}—Å
                </div>
                <div className="detail-row">
                  <strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong>
                  <span
                    className={`priority-badge priority-${alert.metaInfo.priority.toLowerCase()}`}
                  >
                    {alert.metaInfo.priority}
                  </span>
                </div>
                <div className="detail-row">
                  <strong>–§–∞–π–ª:</strong>
                  <span
                    className={`file-badge ${alert.fileInfo.isLocalFile ? "local" : "external"}`}
                  >
                    {alert.fileInfo.isLocalFile ? "–õ–æ–∫–∞–ª—å–Ω—ã–π" : "–í–Ω–µ—à–Ω–∏–π"}
                  </span>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};
