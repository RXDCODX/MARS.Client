import { Badge, Button, Card, Spinner } from "react-bootstrap";
import { ArrowClockwise, Eye, Pencil, Trash } from "react-bootstrap-icons";

import { ChannelRewardRecord } from "@/shared/api";

import styles from "../ChannelRewardsPage.module.scss";
import { RewardsListProps } from "../ChannelRewardsPage.types";

const RewardsList: React.FC<RewardsListProps> = ({
  rewards,
  isLoading,
  error,
  onViewDetails,
  onEdit,
  onDelete,
  onSync,
  isSyncing,
}) => {
  const getStatusBadge = (isEnabled: boolean) => (
    <Badge
      className={`${styles.statusBadge} ${isEnabled ? styles.enabled : styles.disabled}`}
    >
      {isEnabled ? "–ê–∫—Ç–∏–≤–Ω–∞" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"}
    </Badge>
  );

  const getSettingsBadges = (reward: ChannelRewardRecord) => {
    const badges = [];

    if (reward.isUserInputRequired) {
      badges.push(
        <Badge key="input" className={styles.settingBadge}>
          –¢—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥
        </Badge>
      );
    }

    if (reward.isMaxPerStreamEnabled) {
      badges.push(
        <Badge key="max-stream" className={styles.settingBadge}>
          –õ–∏–º–∏—Ç –Ω–∞ —Å—Ç—Ä–∏–º
        </Badge>
      );
    }

    if (reward.isMaxPerUserPerStreamEnabled) {
      badges.push(
        <Badge key="max-user" className={styles.settingBadge}>
          –õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        </Badge>
      );
    }

    if (reward.isGlobalCooldownEnabled) {
      badges.push(
        <Badge key="cooldown" className={styles.settingBadge}>
          –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        </Badge>
      );
    }

    if (reward.shouldRedemptionsSkipRequestQueue) {
      badges.push(
        <Badge key="skip-queue" className={styles.settingBadge}>
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
        </Badge>
      );
    }

    return badges;
  };

  const renderRewardCard = (reward: ChannelRewardRecord) => (
    <Card key={reward.id} className={styles.rewardCard}>
      <Card.Header>
        <h5 className={styles.rewardTitle}>{reward.title}</h5>
        <p className={styles.rewardCost}>{reward.cost} –æ—á–∫–æ–≤</p>
      </Card.Header>
      <Card.Body>
        {reward.prompt && (
          <p className={styles.rewardDescription}>{reward.prompt}</p>
        )}
        <div className={styles.rewardStatus}>
          {getStatusBadge(reward.isEnabled)}
        </div>
        <div className={styles.rewardSettings}>{getSettingsBadges(reward)}</div>
      </Card.Body>
      <Card.Footer className={styles.cardFooter}>
        <div className={styles.actionButtons}>
          <Button
            variant="outline-primary"
            size="sm"
            onClick={() => onViewDetails(reward)}
          >
            <Eye className="me-1" />
            –ü—Ä–æ—Å–º–æ—Ç—Ä
          </Button>
          <Button
            variant="outline-secondary"
            size="sm"
            onClick={() => onEdit(reward)}
          >
            <Pencil className="me-1" />
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button
            variant="outline-danger"
            size="sm"
            onClick={() => onDelete(reward)}
          >
            <Trash className="me-1" />
            –£–¥–∞–ª–∏—Ç—å
          </Button>
        </div>
      </Card.Footer>
    </Card>
  );

  if (isLoading) {
    return (
      <div className={styles.loadingState}>
        <Spinner animation="border" className={styles.spinner} />
        <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≥—Ä–∞–¥...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.errorState}>
        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
        <p className={styles.errorText}>{error}</p>
        <Button variant="primary" onClick={() => window.location.reload()}>
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </div>
    );
  }

  if (!rewards || rewards.length === 0) {
    return (
      <div className={styles.emptyState}>
        <div className={styles.emptyIcon}>üéÅ</div>
        <p className={styles.emptyText}>–ù–∞–≥—Ä–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
        <Button variant="primary" onClick={onSync} disabled={isSyncing}>
          <ArrowClockwise className={`me-1 ${isSyncing ? "spinning" : ""}`} />
          –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Twitch
        </Button>
      </div>
    );
  }

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h3>–ù–∞–≥—Ä–∞–¥—ã –∫–∞–Ω–∞–ª–∞ ({rewards?.length || 0})</h3>
        <Button variant="primary" onClick={onSync} disabled={isSyncing}>
          <ArrowClockwise className={`me-1 ${isSyncing ? "spinning" : ""}`} />
          {isSyncing ? "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è..." : "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å"}
        </Button>
      </div>

      <div className={styles.rewardsGrid}>
        {Array.isArray(rewards) && rewards.map(renderRewardCard)}
      </div>
    </div>
  );
};

export default RewardsList;
