import{R as l}from"./RainbowText-BAj0_Y1K.js";import"./iframe-rOG4V-f_.js";const{expect:e}=__STORYBOOK_MODULE_TEST__,x={title:"Shared/RainbowText",component:l,parameters:{layout:"centered",docs:{description:{component:"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ä–∞–¥—É–∂–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π."}}},tags:["autodocs"],argTypes:{text:{control:"text"}}},s={args:{text:"Rainbow Text! üåà"},play:async({canvasElement:o})=>{await new Promise(a=>setTimeout(a,100)),e(o).toBeInTheDocument();const t=o.querySelector('[class*="rainbow"]');e(t).toBeInTheDocument(),e(t).toHaveTextContent("Rainbow Text! üåà");const n=window.getComputedStyle(t);e(n.animation).toBeDefined(),e(n.animation).toContain("rainbow")}},r={args:{text:"This is a very long rainbow text that should demonstrate the animation effect across multiple words and characters!"},play:async({canvasElement:o})=>{await new Promise(a=>setTimeout(a,100)),e(o).toBeInTheDocument();const t=o.querySelector('[class*="rainbow"]');e(t).toBeInTheDocument(),e(t).toHaveTextContent("This is a very long rainbow text");const n=window.getComputedStyle(t);e(n.animation).toBeDefined()}},c={args:{text:"Hi!"},play:async({canvasElement:o})=>{await new Promise(a=>setTimeout(a,100)),e(o).toBeInTheDocument();const t=o.querySelector('[class*="rainbow"]');e(t).toBeInTheDocument(),e(t).toHaveTextContent("Hi!");const n=window.getComputedStyle(t);e(n.animation).toBeDefined()}},m={args:{text:""},play:async({canvasElement:o})=>{await new Promise(n=>setTimeout(n,100)),e(o).toBeInTheDocument();const t=o.querySelector('[class*="rainbow"]');e(t).toBeInTheDocument(),e(t).toBeInTheDocument()}},i={args:{text:"üåà –†–∞–¥—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üé®"}};s.parameters={...s.parameters,docs:{...s.parameters?.docs,source:{originalSource:`{
  args: {
    text: "Rainbow Text! üåà"
  },
  play: async ({
    canvasElement
  }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è
    expect(canvasElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
    const textElement = canvasElement.querySelector('[class*="rainbow"]');
    expect(textElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(textElement).toHaveTextContent("Rainbow Text! üåà");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    const computedStyle = window.getComputedStyle(textElement!);
    expect(computedStyle.animation).toBeDefined();
    expect(computedStyle.animation).toContain("rainbow");
  }
}`,...s.parameters?.docs?.source}}};r.parameters={...r.parameters,docs:{...r.parameters?.docs,source:{originalSource:`{
  args: {
    text: "This is a very long rainbow text that should demonstrate the animation effect across multiple words and characters!"
  },
  play: async ({
    canvasElement
  }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è
    expect(canvasElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    const textElement = canvasElement.querySelector('[class*="rainbow"]');
    expect(textElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(textElement).toHaveTextContent("This is a very long rainbow text");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const computedStyle = window.getComputedStyle(textElement!);
    expect(computedStyle.animation).toBeDefined();
  }
}`,...r.parameters?.docs?.source}}};c.parameters={...c.parameters,docs:{...c.parameters?.docs,source:{originalSource:`{
  args: {
    text: "Hi!"
  },
  play: async ({
    canvasElement
  }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è
    expect(canvasElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
    const textElement = canvasElement.querySelector('[class*="rainbow"]');
    expect(textElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    expect(textElement).toHaveTextContent("Hi!");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const computedStyle = window.getComputedStyle(textElement!);
    expect(computedStyle.animation).toBeDefined();
  }
}`,...c.parameters?.docs?.source}}};m.parameters={...m.parameters,docs:{...m.parameters?.docs,source:{originalSource:`{
  args: {
    text: ""
  },
  play: async ({
    canvasElement
  }) => {
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 100));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª—Å—è
    expect(canvasElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    const textElement = canvasElement.querySelector('[class*="rainbow"]');
    expect(textElement).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–∞–∂–µ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    expect(textElement).toBeInTheDocument();
  }
}`,...m.parameters?.docs?.source}}};i.parameters={...i.parameters,docs:{...i.parameters?.docs,source:{originalSource:`{
  args: {
    text: "üåà –†–∞–¥—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ üé®"
  }
}`,...i.parameters?.docs?.source}}};const d=["Default","LongText","ShortText","EmptyText","WithEmojis"];export{s as Default,m as EmptyText,r as LongText,c as ShortText,i as WithEmojis,d as __namedExportsOrder,x as default};
