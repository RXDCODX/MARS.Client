import fs from "fs";
import { resolve } from "path";
import process from "process";
import { generateApi } from "swagger-typescript-api";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏–∑ swagger (api)
function getControllersFromSwagger(swaggerSource) {
  const controllers = new Set();

  Object.keys(swaggerSource.paths).forEach(path => {
    const pathData = swaggerSource.paths[path];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—É—Ç–∏
    Object.values(pathData).forEach(methodData => {
      if (methodData.tags && Array.isArray(methodData.tags)) {
        methodData.tags.forEach(tag => {
          if (tag && !tag.toLowerCase().includes("hub")) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ö–∞–±
            controllers.add(tag);
          }
        });
      }
    });
  });

  return Array.from(controllers);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SignalR —Ö–∞–±–æ–≤ –∏–∑ swagger (hubs)
function getSignalRHubsFromSwagger(swaggerSource) {
  const hubPaths = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ö–∞–±—É

  // –ò—â–µ–º –≤ –ø—É—Ç—è—Ö
  Object.keys(swaggerSource.paths).forEach(path => {
    const pathData = swaggerSource.paths[path];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—É—Ç–∏
    Object.values(pathData).forEach(methodData => {
      if (methodData.tags && Array.isArray(methodData.tags)) {
        methodData.tags.forEach(tag => {
          if (tag && tag.toLowerCase().includes("hub")) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ —Ö–∞–±—É
            let hubPath;

            if (path.startsWith("/hubs/")) {
              // –î–ª—è –ø—É—Ç–µ–π –≤–∏–¥–∞ /hubs/HubName/...
              const hubName = path.split("/")[2];
              hubPath = `/hubs/${hubName}`;
            } else if (path.startsWith("/") && !path.startsWith("/api/")) {
              // –î–ª—è –ø—É—Ç–µ–π –≤–∏–¥–∞ /hubname/...
              const hubName = path.split("/")[1];
              hubPath = `/${hubName}`;
            }

            if (hubPath) {
              hubPaths.set(tag, hubPath);
            }
          }
        });
      }
    });
  });

  return Array.from(hubPaths.entries()).map(([hubName, hubPath]) => ({
    name: hubName,
    path: hubPath,
  }));
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
let CONTROLLERS = [];
let SIGNALR_HUBS = [];

// –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
const OUTPUT_DIR_ROOT = resolve(process.cwd(), "./src/shared/api/");
const OUTPUT_DIR_TYPES = resolve(OUTPUT_DIR_ROOT, "./types/"); // –û–±—â–∏–µ —Ç–∏–ø—ã
const OUTPUT_DIR_DATA_CONTRACTS = resolve(OUTPUT_DIR_ROOT, "./data-contracts/"); // Data contracts
const OUTPUT_DIR_HTTP_CLIENTS = resolve(OUTPUT_DIR_ROOT, "./http-clients/"); // HTTP –∫–ª–∏–µ–Ω—Ç—ã
const OUTPUT_DIR_SIGNALR_TYPES = resolve(OUTPUT_DIR_ROOT, "./signalr-types/"); // SignalR —Ç–∏–ø—ã
const OUTPUT_DIR_SIGNALR_CLIENTS = resolve(
  OUTPUT_DIR_ROOT,
  "./signalr-clients/"
); // SignalR –∫–ª–∏–µ–Ω—Ç—ã

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
[
  OUTPUT_DIR_ROOT,
  OUTPUT_DIR_TYPES,
  OUTPUT_DIR_DATA_CONTRACTS,
  OUTPUT_DIR_HTTP_CLIENTS,
  OUTPUT_DIR_SIGNALR_TYPES,
  OUTPUT_DIR_SIGNALR_CLIENTS,
].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ enum'–æ–≤ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
function deduplicateEnums(filePath) {
  let content = fs.readFileSync(filePath, "utf-8");

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ enum'—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const enumPattern = /export type (\w+) =[\s\S]*?;/g;
  const enums = [];
  let match;

  while ((match = enumPattern.exec(content)) !== null) {
    const enumName = match[1];
    const enumValue = match[0];
    enums.push({ name: enumName, value: enumValue });
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º enum'—ã –ø–æ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º
  const enumGroups = new Map();
  enums.forEach(enumItem => {
    const key = enumItem.value.replace(enumItem.name, "PLACEHOLDER");
    if (!enumGroups.has(key)) {
      enumGroups.set(key, []);
    }
    enumGroups.get(key).push(enumItem);
  });

  // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π enum, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ type alias
  enumGroups.forEach(group => {
    if (group.length > 1) {
      const baseEnum = group[0];
      const baseName = baseEnum.name;

      // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è enum'—ã –Ω–∞ type alias
      group.slice(1).forEach(duplicateEnum => {
        const aliasPattern = new RegExp(
          `export type ${duplicateEnum.name} =[\\s\\S]*?;`,
          "g"
        );
        content = content.replace(
          aliasPattern,
          `export type ${duplicateEnum.name} = ${baseName};`
        );
      });
    }
  });

  fs.writeFileSync(filePath, content);
  console.log(`‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è enum'–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è ${filePath}`);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä—É–ø–ø—ã enum'–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
  return enumGroups;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ (–±–µ–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤)
async function generateTypesOnly() {
  console.log("üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã...");

  const swaggerApiJsonPath = resolve(process.cwd(), "./api/swagger_api.json");

  await generateApi({
    input: swaggerApiJsonPath,
    output: OUTPUT_DIR_TYPES,
    name: "types.ts",
    cleanOutput: true,
    httpClientType: "axios",
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: false, // –¢–æ–ª—å–∫–æ —Ç–∏–ø—ã
    modular: false, // –û–¥–∏–Ω —Ñ–∞–π–ª —Å —Ç–∏–ø–∞–º–∏
    sortTypes: true,
    enumNamesAsValues: false,
    generateResponses: false,
    extractEnums: true,
    codeGenConstructs: constructs => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const hadNull = typeof value === "string" && /\|\s*null\b/.test(value);
        const hadUndefined =
          typeof value === "string" && /\|\s*undefined\b/.test(value);
        let cleaned = String(value)
          .replace(/\s*\|\s*null\b/g, "")
          .replace(/\s*\|\s*undefined\b/g, "")
          .trim();
        const optionalMark = hadNull || hadUndefined ? "?" : "";
        return `${readonly ? "readonly " : ""}${key}${optionalMark}: ${cleaned}`;
      },
    }),
  });

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
  const apiFilePath = resolve(OUTPUT_DIR_TYPES, "Api.ts");
  const typesFilePath = resolve(OUTPUT_DIR_TYPES, "types.ts");
  if (fs.existsSync(apiFilePath)) {
    fs.renameSync(apiFilePath, typesFilePath);
  }

  console.log("‚úÖ –¢–∏–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ types/types.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ data-contracts –æ—Ç–¥–µ–ª—å–Ω–æ
async function generateDataContracts() {
  console.log("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º data-contracts...");

  // –í–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö data-contracts, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ types
  // –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const typesFilePath = resolve(OUTPUT_DIR_TYPES, "types.ts");
  const dataContractsFilePath = resolve(
    OUTPUT_DIR_DATA_CONTRACTS,
    "data-contracts.ts"
  );

  if (fs.existsSync(typesFilePath)) {
    fs.copyFileSync(typesFilePath, dataContractsFilePath);
    console.log(
      "‚úÖ Data-contracts —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ types/ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
    );
  } else {
    console.log(
      "‚ö†Ô∏è –§–∞–π–ª types/types.ts –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é data-contracts"
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑ —Ç–∏–ø–æ–≤)
async function generateHttpClients() {
  console.log("üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTTP –∫–ª–∏–µ–Ω—Ç—ã...");

  const swaggerApiJsonPath = resolve(process.cwd(), "./api/swagger_api.json");

  await generateApi({
    input: swaggerApiJsonPath,
    output: OUTPUT_DIR_HTTP_CLIENTS,
    name: "Api.ts",
    cleanOutput: true,
    httpClientType: "axios",
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: true, // –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã
    modular: true, // –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    moduleNameFirstTag: true,
    sortTypes: false, // –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    enumNamesAsValues: false,
    generateResponses: true,
    extractEnums: false, // –¢–∏–ø—ã —É–∂–µ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    codeGenConstructs: constructs => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const hadNull = typeof value === "string" && /\|\s*null\b/.test(value);
        const hadUndefined =
          typeof value === "string" && /\|\s*undefined\b/.test(value);
        let cleaned = String(value)
          .replace(/\s*\|\s*null\b/g, "")
          .replace(/\s*\|\s*undefined\b/g, "")
          .trim();
        const optionalMark = hadNull || hadUndefined ? "?" : "";
        return `${readonly ? "readonly " : ""}${key}${optionalMark}: ${cleaned}`;
      },
    }),
  });

  // // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–∞–∂–¥–æ–º –∫–ª–∏–µ–Ω—Ç–µ
  // const clientFiles = fs
  //   .readdirSync(OUTPUT_DIR_HTTP_CLIENTS)
  //   .filter(file => file.endsWith(".ts"));
  // clientFiles.forEach(file => {
  //   const filePath = resolve(OUTPUT_DIR_HTTP_CLIENTS, file);
  //   let content = fs.readFileSync(filePath, "utf-8");

  //   // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
  //   content = content.replace(
  //     /import \{ ([^}]+) \} from "\.\/data-contracts";/g,
  //     'import type { $1 } from "../../types/types";'
  //   );

  //   content = content.replace(
  //     /import \{ ([^}]+) \} from "\.\/http-client";/g,
  //     'import type { $1 } from "../../types/types";'
  //   );

  //   // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  //   content = content.replace(/\n\s*\n\s*\n/g, "\n\n");

  //   fs.writeFileSync(filePath, content);
  // });

  console.log("‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ http-clients/");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SignalR —Ç–∏–ø–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
async function generateSignalRTypes() {
  console.log("üì° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SignalR —Ç–∏–ø—ã...");

  const swaggerHubsJsonPath = resolve(process.cwd(), "./api/swagger_hubs.json");

  await generateApi({
    input: swaggerHubsJsonPath,
    output: OUTPUT_DIR_SIGNALR_TYPES,
    name: "signalr-types.ts",
    cleanOutput: true,
    httpClientType: "axios",
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: false, // –¢–æ–ª—å–∫–æ —Ç–∏–ø—ã
    modular: false, // –û–¥–∏–Ω —Ñ–∞–π–ª
    sortTypes: true,
    extractEnums: true,
    codeGenConstructs: constructs => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const hadNull = typeof value === "string" && /\|\s*null\b/.test(value);
        const hadUndefined =
          typeof value === "string" && /\|\s*undefined\b/.test(value);
        let cleaned = String(value)
          .replace(/\s*\|\s*null\b/g, "")
          .replace(/\s*\|\s*undefined\b/g, "")
          .trim();
        const optionalMark = hadNull || hadUndefined ? "?" : "";
        return `${readonly ? "readonly " : ""}${key}${optionalMark}: ${cleaned}`;
      },
    }),
  });

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
  const apiFilePath = resolve(OUTPUT_DIR_SIGNALR_TYPES, "Api.ts");
  const signalrTypesFilePath = resolve(
    OUTPUT_DIR_SIGNALR_TYPES,
    "signalr-types.ts"
  );
  if (fs.existsSync(apiFilePath)) {
    fs.renameSync(apiFilePath, signalrTypesFilePath);
  }

  // –¢–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
  if (fs.existsSync(signalrTypesFilePath)) {
    let content = fs.readFileSync(signalrTypesFilePath, "utf-8");

    // –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞—Ö API
    const duplicateTypes = [
      "MediaFileInfo",
      "MediaFileInfoTypeEnum",
      "MediaMetaInfo",
      "MediaMetaInfoPriorityEnum",
      "MediaPositionInfo",
      "MediaStylesInfo",
      "MediaTextInfo",
      "Move",
      "MovePending",
      "MovePendingDto",
      "ParseRequest",
      "ParseRequestSourceEnum",
      "ParseResult",
      "ServiceInfo",
      "ServiceInfoStatusEnum",
      "ServiceLog",
      "TekkenCharacter",
      "TekkenCharacterPendingDto",
    ];

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–∏–ø—ã
    duplicateTypes.forEach(typeName => {
      // –£–¥–∞–ª—è–µ–º interface
      content = content.replace(
        new RegExp(`export interface ${typeName}[\\s\\S]*?}\\s*`, "g"),
        ""
      );
      // –£–¥–∞–ª—è–µ–º enum
      content = content.replace(
        new RegExp(`export enum ${typeName}[\\s\\S]*?}\\s*`, "g"),
        ""
      );
      // –£–¥–∞–ª—è–µ–º type
      content = content.replace(
        new RegExp(`export type ${typeName}[\\s\\S]*?;\\s*`, "g"),
        ""
      );
    });

    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = content.replace(/\n\s*\n\s*\n/g, "\n\n");

    fs.writeFileSync(signalrTypesFilePath, content);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é enum'–æ–≤
    deduplicateEnums(signalrTypesFilePath);
  }

  console.log(
    "‚úÖ SignalR —Ç–∏–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ signalr-types/signalr-types.ts (–¥—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã)"
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
function createApiConfig() {
  const apiConfigContent = `/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç VITE_BASE_PATH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export function getApiBaseUrl(): string {
  // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º import.meta.env
  if (typeof window !== "undefined" && typeof import.meta !== "undefined") {
    const basePath = import.meta.env.VITE_BASE_PATH;
    if (basePath) {
      return basePath.replace(/\\/$/, "");
    }
  }

  // –í Node.js –∏—Å–ø–æ–ª—å–∑—É–µ–º process.env
  if (typeof process !== "undefined" && process.env) {
    const basePath = process.env.VITE_BASE_PATH;
    if (basePath) {
      return basePath.replace(/\\/$/, "");
    }
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  return "";
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è API endpoint
 * @param endpoint - –ø—É—Ç—å –∫ endpoint (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/api/commands")
 * @returns –ø–æ–ª–Ω—ã–π URL
 */
export function createApiUrl(endpoint: string): string {
  const baseUrl = getApiBaseUrl();
  const cleanEndpoint = endpoint.startsWith("/") ? endpoint : \`/\${endpoint}\`;

  return \`\${baseUrl}\${cleanEndpoint}\`;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export const defaultApiConfig = {
  baseURL: getApiBaseUrl(),
};
`;

  fs.writeFileSync(resolve(OUTPUT_DIR_ROOT, "api-config.ts"), apiConfigContent);
  console.log("‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ api-config.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
async function generateSignalRClients() {
  console.log(
    "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω React wrapper: react-signalr —Å children props"
  );

  for (const hub of SIGNALR_HUBS) {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–∞–±–∞
    const hubDir = resolve(OUTPUT_DIR_SIGNALR_CLIENTS, `${hub.name}`);
    if (!fs.existsSync(hubDir)) {
      fs.mkdirSync(hubDir, { recursive: true });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ö–∞–±—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ swagger.json
    const hubUrl = hub.path.startsWith("/") ? hub.path.slice(1) : hub.path;

    // –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª - SignalR –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const signalRContextContent = `import { HubConnectionBuilder, IRetryPolicy } from "@microsoft/signalr";

import { logger } from "@/shared/logger";

const policy: IRetryPolicy = { nextRetryDelayInMilliseconds: () => 5000 };

const baseUrl = import.meta.env.VITE_BASE_PATH;

export const ${hub.name}SignalRConnectionBuilder = new HubConnectionBuilder()
  .withUrl(baseUrl + "${hubUrl}")
  .withAutomaticReconnect(policy)
  .configureLogging(logger);
`;

    fs.writeFileSync(
      resolve(hubDir, "SignalRContext.ts"),
      signalRContextContent
    );

    // –í—Ç–æ—Ä–æ–π —Ñ–∞–π–ª - React wrapper
    const reactWrapperContent = `import * as signalR from "react-signalr";

import { logger } from "@/shared/logger";

export const ${hub.name}SignalRContext = signalR.createSignalRContext({});

interface ${hub.name}Props {
  children: React.ReactNode;
}

export function ${hub.name}SignalRHubWrapper({
  children,
}: ${hub.name}Props) {
  return (
    <${hub.name}SignalRContext.Provider
      automaticReconnect={true}
      onError={error => new Promise(resolve => resolve(console.log(error)))}
      onClosed={event => console.log(event)}
      onOpen={event => console.log(event)}
      logger={logger}
      withCredentials={false}
      url={import.meta.env.VITE_BASE_PATH + "${hubUrl}"}
      logMessageContent
    >
      {children}
    </${hub.name}SignalRContext.Provider>
  );
}
`;

    fs.writeFileSync(
      resolve(hubDir, "SignalRHubWrapper.tsx"),
      reactWrapperContent
    );

    console.log(
      `‚úÖ SignalR –∫–ª–∏–µ–Ω—Ç –¥–ª—è ${hub.name} —Å–æ–∑–¥–∞–Ω –≤ signalr-clients/${hub.name}/`
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function createIndexFile() {
  const indexContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
// –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export * from "./api-config";

// –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫)
export * from "./types/types";

// –ò–º–ø–æ—Ä—Ç—ã SignalR —Ç–∏–ø–æ–≤
export * from "./signalr-types/signalr-types";

// –ò–º–ø–æ—Ä—Ç—ã HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤
${CONTROLLERS.map(controller => `export { ${controller} } from "./http-clients/${controller}";`).join("\n")}

// –ò–º–ø–æ—Ä—Ç—ã SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
${SIGNALR_HUBS.map(hub => `export { ${hub.name}SignalRConnectionBuilder } from "./signalr-clients/${hub.name}/SignalRContext";`).join("\n")}
${SIGNALR_HUBS.map(hub => `export { ${hub.name}SignalRContext } from "./signalr-clients/${hub.name}/SignalRHubWrapper";`).join("\n")}
${SIGNALR_HUBS.map(hub => `export { ${hub.name}SignalRHubWrapper } from "./signalr-clients/${hub.name}/SignalRHubWrapper";`).join("\n")}
`;

  fs.writeFileSync(resolve(OUTPUT_DIR_ROOT, "index.ts"), indexContent);
  console.log("‚úÖ –ò–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–∏–ø–∞–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function createLegacyCompatibilityFiles() {
  // –°–æ–∑–¥–∞–µ–º shim –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ data-contracts
  const legacyDataContractsPath = resolve(OUTPUT_DIR_ROOT, "data-contracts.ts");
  fs.writeFileSync(legacyDataContractsPath, 'export * from "./types/types";\n');

  // –°–æ–∑–¥–∞–µ–º shim –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ signalr-types
  const legacySignalRTypesDir = resolve(OUTPUT_DIR_ROOT, "./SignalR/types/");
  if (!fs.existsSync(legacySignalRTypesDir)) {
    fs.mkdirSync(legacySignalRTypesDir, { recursive: true });
  }
  const legacyShimPath = resolve(legacySignalRTypesDir, "signalr-types.ts");
  fs.writeFileSync(
    legacyShimPath,
    'export * from "../../signalr-types/signalr-types";\n'
  );

  console.log("‚úÖ –§–∞–π–ª—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã");
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é API —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤...");

    // –ß–∏—Ç–∞–µ–º swagger —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ —Ö–∞–±–æ–≤
    const swaggerApiJsonPath = resolve(process.cwd(), "./api/swagger_api.json");
    const swaggerHubsJsonPath = resolve(
      process.cwd(),
      "./api/swagger_hubs.json"
    );
    const swaggerApiSource = JSON.parse(
      fs.readFileSync(swaggerApiJsonPath, "utf-8")
    );
    const swaggerHubsSource = JSON.parse(
      fs.readFileSync(swaggerHubsJsonPath, "utf-8")
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã
    CONTROLLERS = getControllersFromSwagger(swaggerApiSource);
    SIGNALR_HUBS = getSignalRHubsFromSwagger(swaggerHubsSource);

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: ${CONTROLLERS.join(", ")}`);
    console.log(
      `üìã –ù–∞–π–¥–µ–Ω–æ SignalR —Ö–∞–±–æ–≤: ${SIGNALR_HUBS.map(hub => `${hub.name} (${hub.path})`).join(", ")}`
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    await generateTypesOnly();
    await generateDataContracts();
    await generateSignalRTypes();

    // –°–æ–∑–¥–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
    createApiConfig();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ (–±–µ–∑ —Ç–∏–ø–æ–≤)
    await generateHttpClients();
    await generateSignalRClients();

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    createLegacyCompatibilityFiles();

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
    createIndexFile();

    console.log("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    console.log("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:");
    console.log("   - types/ - –æ–±—â–∏–µ —Ç–∏–ø—ã");
    console.log("   - data-contracts/ - data contracts");
    console.log("   - http-clients/ - HTTP –∫–ª–∏–µ–Ω—Ç—ã");
    console.log("   - signalr-types/ - SignalR —Ç–∏–ø—ã");
    console.log("   - signalr-clients/ - SignalR –∫–ª–∏–µ–Ω—Ç—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
main();
