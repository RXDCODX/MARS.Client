import { exec } from "child_process";
import fs from "fs";
import { resolve } from "path";
import process from "process";
import { generateApi } from "swagger-typescript-api";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏–∑ swagger (api)
function getControllersFromSwagger(swaggerSource) {
  const controllers = new Set();

  Object.keys(swaggerSource.paths).forEach(path => {
    const pathData = swaggerSource.paths[path];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—É—Ç–∏
    Object.values(pathData).forEach(methodData => {
      if (methodData.tags && Array.isArray(methodData.tags)) {
        methodData.tags.forEach(tag => {
          if (tag && !tag.toLowerCase().includes("hub")) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ö–∞–±
            controllers.add(tag);
          }
        });
      }
    });
  });

  return Array.from(controllers);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SignalR —Ö–∞–±–æ–≤ –∏–∑ swagger (hubs)
function getSignalRHubsFromSwagger(swaggerSource) {
  const hubPaths = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ö–∞–±—É

  // –ò—â–µ–º –≤ –ø—É—Ç—è—Ö
  Object.keys(swaggerSource.paths).forEach(path => {
    const pathData = swaggerSource.paths[path];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—É—Ç–∏
    Object.values(pathData).forEach(methodData => {
      if (methodData.tags && Array.isArray(methodData.tags)) {
        methodData.tags.forEach(tag => {
          if (tag && tag.toLowerCase().includes("hub")) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ —Ö–∞–±—É
            let hubPath;

            if (path.startsWith("/hubs/")) {
              // –î–ª—è –ø—É—Ç–µ–π –≤–∏–¥–∞ /hubs/HubName/...
              const hubName = path.split("/")[2];
              hubPath = `/hubs/${hubName}`;
            } else if (path.startsWith("/") && !path.startsWith("/api/")) {
              // –î–ª—è –ø—É—Ç–µ–π –≤–∏–¥–∞ /hubname/...
              const hubName = path.split("/")[1];
              hubPath = `/${hubName}`;
            }

            if (hubPath) {
              hubPaths.set(tag, hubPath);
            }
          }
        });
      }
    });
  });

  return Array.from(hubPaths.entries()).map(([hubName, hubPath]) => ({
    name: hubName,
    path: hubPath,
  }));
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
let CONTROLLERS = [];
let SIGNALR_HUBS = [];

// –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫: –≤—Å–µ —Ç–∏–ø—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ types
const OUTPUT_DIR_ROOT = resolve(process.cwd(), "./src/shared/api/");
const OUTPUT_DIR_TYPES = resolve(OUTPUT_DIR_ROOT, "./types/"); // –í—Å–µ –æ–±—â–∏–µ —Ç–∏–ø—ã: data-contracts.ts –∏ signalr-types.ts
const OUTPUT_DIR_HTTP_CLIENTS = resolve(OUTPUT_DIR_ROOT, "./http-clients/"); // HTTP –∫–ª–∏–µ–Ω—Ç—ã
const OUTPUT_DIR_SIGNALR_CLIENTS = resolve(
  OUTPUT_DIR_ROOT,
  "./signalr-clients/"
); // SignalR –∫–ª–∏–µ–Ω—Ç—ã

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ API
function cleanApiDirectory() {
  console.log("üßπ –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É API...");

  if (fs.existsSync(OUTPUT_DIR_ROOT)) {
    fs.rmSync(OUTPUT_DIR_ROOT, { recursive: true, force: true });
    console.log("‚úÖ –ü–∞–ø–∫–∞ API –æ—á–∏—â–µ–Ω–∞");
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  fs.mkdirSync(OUTPUT_DIR_ROOT, { recursive: true });
  fs.mkdirSync(OUTPUT_DIR_TYPES, { recursive: true });
  fs.mkdirSync(OUTPUT_DIR_HTTP_CLIENTS, { recursive: true });
  fs.mkdirSync(OUTPUT_DIR_SIGNALR_CLIENTS, { recursive: true });

  console.log("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ API —Å–æ–∑–¥–∞–Ω—ã");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ enum'–æ–≤ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
function deduplicateEnums(filePath) {
  let content = fs.readFileSync(filePath, "utf-8");

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ enum'—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const enumPattern = /export type (\w+) =[\s\S]*?;/g;
  const enums = [];
  let match;

  while ((match = enumPattern.exec(content)) !== null) {
    const enumName = match[1];
    const enumValue = match[0];
    enums.push({ name: enumName, value: enumValue });
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º enum'—ã –ø–æ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º
  const enumGroups = new Map();
  enums.forEach(enumItem => {
    const key = enumItem.value.replace(enumItem.name, "PLACEHOLDER");
    if (!enumGroups.has(key)) {
      enumGroups.set(key, []);
    }
    enumGroups.get(key).push(enumItem);
  });

  // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π enum, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ type alias
  enumGroups.forEach(group => {
    if (group.length > 1) {
      const baseEnum = group[0];
      const baseName = baseEnum.name;

      // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è enum'—ã –Ω–∞ type alias
      group.slice(1).forEach(duplicateEnum => {
        const aliasPattern = new RegExp(
          `export type ${duplicateEnum.name} =[\\s\\S]*?;`,
          "g"
        );
        content = content.replace(
          aliasPattern,
          `export type ${duplicateEnum.name} = ${baseName};`
        );
      });
    }
  });

  fs.writeFileSync(filePath, content);
  console.log(`‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è enum'–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è ${filePath}`);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥—Ä—É–ø–ø—ã enum'–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞
  return enumGroups;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è OperationResult —Ç–∏–ø–æ–≤ –Ω–∞ –æ–±–æ–±—â–µ–Ω–Ω—ã–π
function replaceOperationResultTypes(filePath) {
  let content = fs.readFileSync(filePath, "utf-8");

  console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OperationResult —Ç–∏–ø—ã –≤ ${filePath}...`);

  // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - export interface TypeNameOperationResult { ... }
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω, –∫–æ—Ç–æ—Ä—ã–π –ù–ï –∑–∞—Ö–≤–∞—Ç–∏—Ç –æ–±—ã—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
  const oldFormatPattern =
    /export interface (\w+OperationResult) \{\s*success:\s*boolean[,;]\s*message\?:\s*string[,;]\s*data\?:[\s\S]*?\n\}/g;

  // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å allOf - export type TypeNameOperationResult = { ... }
  const allOfPattern =
    /export type (\w+)OperationResult = \{[\s\S]*?\$ref: "#\/components\/schemas\/OperationResult"[\s\S]*?\} & object;/g;

  // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ü—Ä–æ—Å—Ç—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã OperationResult, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ allOf
  const simpleInterfacePattern =
    /export interface (\w+)OperationResult extends OperationResult \{[\s\S]*?\}/g;

  // –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ type –∞–ª–∏–∞—Å—ã –≤–∏–¥–∞: export type OperationResult<ConcreteType> = (OperationResult)
  // –° –≤–æ–∑–º–æ–∂–Ω—ã–º JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"
  const incorrectAliasPattern =
    /(?:\/\*\* –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏[\s\S]*?\*\/\s+)?export type OperationResult<[^>]+> = \(OperationResult\)\s*/g;

  // –ü–∞—Ç—Ç–µ—Ä–Ω 5: –ë–∞–∑–æ–≤—ã–π OperationResult –±–µ–∑ Generic –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∏–∑ Swagger)
  // /** –û–±–æ–±—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ */ export interface OperationResult { success, message, data: any }
  const baseOperationResultPattern =
    /\/\*\* –û–±–æ–±—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ \*\/\s+export interface OperationResult \{[\s\S]*?data:\s*any[,;][\s\S]*?\n\}/g;

  const foundTypes = [];
  let match;

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  const patterns = [
    { regex: oldFormatPattern, name: "old format" },
    { regex: allOfPattern, name: "allOf format" },
    { regex: simpleInterfacePattern, name: "simple interface" },
    { regex: incorrectAliasPattern, name: "incorrect alias" },
    { regex: baseOperationResultPattern, name: "base OperationResult" },
  ];

  patterns.forEach(({ regex, name }) => {
    const contentCopy = content;
    regex.lastIndex = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastIndex –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    while ((match = regex.exec(contentCopy)) !== null) {
      const fullMatch = match[0];
      const typeName = match[1] || "Generic";
      foundTypes.push({ fullMatch, typeName, format: name });
    }
  });

  if (foundTypes.length > 0) {
    console.log(
      `   –ù–∞–π–¥–µ–Ω–æ ${foundTypes.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤ OperationResult`
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    foundTypes.slice(0, 3).forEach(({ typeName, format, fullMatch }) => {
      console.log(
        `   - ${typeName} (${format}): ${fullMatch.substring(0, 80)}...`
      );
    });
  }

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–∏–ø—ã OperationResult
  foundTypes.forEach(({ fullMatch }) => {
    // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
    const index = content.indexOf(fullMatch);
    if (index !== -1) {
      content =
        content.slice(0, index) + content.slice(index + fullMatch.length);
      // console.log(`   –£–¥–∞–ª–µ–Ω: ${typeName}`);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ OperationResult
  const hasGenericOperationResult =
    /export interface OperationResult<TData/.test(content);

  if (!hasGenericOperationResult) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ–±—â–µ–Ω–Ω—ã–π —Ç–∏–ø OperationResult –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    const genericOperationResult = `
/**
 * –û–±–æ–±—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @template TData - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –≤ –ø–æ–ª–µ data
 */
export interface OperationResult<TData = any> {
    /** –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ */
    success: boolean;
    /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ */
    message?: string;
    /** –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ */
    data?: TData;
}
`;

    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∏–º–ø–æ—Ä—Ç–æ–≤
    const insertPosition = content.search(/export (interface|type|class|enum)/);
    if (insertPosition !== -1) {
      content =
        content.slice(0, insertPosition) +
        genericOperationResult +
        "\n" +
        content.slice(insertPosition);
    } else {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      const commentEndIndex = content.indexOf("*/");
      if (commentEndIndex !== -1) {
        content =
          content.slice(0, commentEndIndex + 2) +
          "\n" +
          genericOperationResult +
          content.slice(commentEndIndex + 2);
      } else {
        content = genericOperationResult + content;
      }
    }

    console.log("   ‚úì –î–æ–±–∞–≤–ª–µ–Ω –æ–±–æ–±—â–µ–Ω–Ω—ã–π —Ç–∏–ø OperationResult<TData>");
  }

  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ OperationResult –Ω–∞ –æ–±–æ–±—â–µ–Ω–Ω—ã–π
  const replacements = new Map();

  content = content.replace(
    /(\w+)(IEnumerable|List|Array)?OperationResult(?!<)/g,
    (match, typeName, collection) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–ª–∏ —Ç–∏–ø–∞
      if (match.startsWith("export ")) {
        return match;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É
      let replacement;
      if (collection) {
        replacement = `OperationResult<${typeName}[]>`;
      } else {
        replacement = `OperationResult<${typeName}>`;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–µ–Ω
      if (!replacements.has(match)) {
        replacements.set(match, replacement);
      }

      return replacement;
    }
  );

  if (replacements.size > 0) {
    console.log(`   ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${replacements.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–º–µ–Ω —Ç–∏–ø–æ–≤`);
  }

  // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = content.replace(/\n{4,}/g, "\n\n");

  fs.writeFileSync(filePath, content);
  console.log(`‚úÖ OperationResult —Ç–∏–ø—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);

  return {
    processedTypes: foundTypes.length,
    replacements: replacements.size,
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ data-contracts –æ—Ç–¥–µ–ª—å–Ω–æ (–≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ types)
async function generateDataContracts() {
  console.log("üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º data-contracts...");

  // –ö–æ–ø–∏—Ä—É–µ–º data-contracts –∏–∑ http-clients –≤ types
  const httpClientsDataContractsPath = resolve(
    OUTPUT_DIR_HTTP_CLIENTS,
    "data-contracts.ts"
  );
  const typesDataContractsPath = resolve(OUTPUT_DIR_TYPES, "data-contracts.ts");

  if (fs.existsSync(httpClientsDataContractsPath)) {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ types —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(OUTPUT_DIR_TYPES)) {
      fs.mkdirSync(OUTPUT_DIR_TYPES, { recursive: true });
    }
    fs.copyFileSync(httpClientsDataContractsPath, typesDataContractsPath);
    console.log("‚úÖ Data-contracts —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ types/data-contracts.ts");

    // –ó–∞–º–µ–Ω—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è OperationResult —Ç–∏–ø—ã –Ω–∞ –æ–±–æ–±—â–µ–Ω–Ω—ã–π
    replaceOperationResultTypes(typesDataContractsPath);

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ http-clients (–æ–Ω –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω)
    fs.unlinkSync(httpClientsDataContractsPath);
    console.log("   üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π data-contracts.ts —É–¥–∞–ª–µ–Ω –∏–∑ http-clients");
  } else {
    console.log(
      "‚ö†Ô∏è –§–∞–π–ª http-clients/data-contracts.ts –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é data-contracts"
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑ —Ç–∏–ø–æ–≤)
async function generateHttpClients() {
  console.log("üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTTP –∫–ª–∏–µ–Ω—Ç—ã...");

  const swaggerApiJsonPath = resolve(process.cwd(), "./api/swagger_api.json");

  await generateApi({
    input: swaggerApiJsonPath,
    output: OUTPUT_DIR_HTTP_CLIENTS,
    name: "types.ts",
    cleanOutput: true,
    httpClientType: "axios",
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: true, // –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã
    modular: true, // –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    moduleNameFirstTag: true,
    sortTypes: false, // –ù–µ –Ω—É–∂–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    enumNamesAsValues: false,
    generateResponses: true,
    extractEnums: true, // –ò–∑–≤–ª–µ–∫–∞–µ–º enum'—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    hooks: {
      onCreateComponent: component => {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–∏–ø–æ–≤
        if (
          component.typeName &&
          component.typeName.endsWith("OperationResult")
        ) {
          // –ü–æ–º–µ—á–∞–µ–º OperationResult —Ç–∏–ø—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          component._isOperationResult = true;
        }
        return component;
      },
      onFormatTypeName: (typeName, formatType) => {
        // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ OperationResult
        if (typeName.endsWith("OperationResult") && formatType !== "file") {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø –∏–∑ –∏–º–µ–Ω–∏
          const match = typeName.match(
            /^(.+?)(IEnumerable|List|Array)?OperationResult$/
          );
          if (match) {
            const [, baseType, collection] = match;
            const collectionSuffix = collection ? "[]" : "";
            return `OperationResult<${baseType}${collectionSuffix}>`;
          }
        }
        return typeName;
      },
    },
    codeGenConstructs: constructs => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const hadNull = typeof value === "string" && /\|\s*null\b/.test(value);
        const hadUndefined =
          typeof value === "string" && /\|\s*undefined\b/.test(value);
        let cleaned = String(value)
          .replace(/\s*\|\s*null\b/g, "")
          .replace(/\s*\|\s*undefined\b/g, "")
          .trim();
        const optionalMark = hadNull || hadUndefined ? "?" : "";
        return `${readonly ? "readonly " : ""}${key}${optionalMark}: ${cleaned}`;
      },
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º TypeWithGeneric –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Generic —Ç–∏–ø–æ–≤
      TypeWithGeneric: (typeName, genericArgs) =>
        `${typeName}<${Array.isArray(genericArgs) ? genericArgs.join(", ") : genericArgs}>`,
    }),
  });

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ –∫–∞–∂–¥–æ–º –∫–ª–∏–µ–Ω—Ç–µ –Ω–∞ –æ–±—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤ –∏ —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ data-contracts
  const clientFiles = fs
    .readdirSync(OUTPUT_DIR_HTTP_CLIENTS)
    .filter(file => file.endsWith(".ts"));

  console.log(
    `\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${clientFiles.length} —Ñ–∞–π–ª–æ–≤ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤...`
  );

  clientFiles.forEach(file => {
    const filePath = resolve(OUTPUT_DIR_HTTP_CLIENTS, file);

    // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª —Å —Ç–∏–ø–∞–º–∏, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ–≥–æ –≤ data-contracts.ts –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (file === "types.ts") {
      const dataContractsPath = resolve(
        OUTPUT_DIR_HTTP_CLIENTS,
        "data-contracts.ts"
      );
      fs.renameSync(filePath, dataContractsPath);
      console.log(
        "   üìã –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω types.ts –≤ data-contracts.ts –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"
      );
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ data-contracts.ts, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (file === "data-contracts.ts") {
      return;
    }

    let content = fs.readFileSync(filePath, "utf-8");

    // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ –æ–±—â–∏–π —Ñ–∞–π–ª —Ç–∏–ø–æ–≤
    const importsBefore = (content.match(/import.*from.*data-contracts/g) || [])
      .length;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º Generic —Ç–∏–ø–æ–≤
    const parseImports = importString => {
      const baseTypes = new Set();
      const enumTypes = new Set();
      const paramsTypes = new Set();

      // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º, —É—á–∏—Ç—ã–≤–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ <>
      let currentToken = "";
      let bracketDepth = 0;

      for (let char of importString + ",") {
        if (char === "<") {
          bracketDepth++;
        } else if (char === ">") {
          bracketDepth--;
        } else if (char === "," && bracketDepth === 0) {
          const trimmed = currentToken.trim();
          if (trimmed) {
            // –ï—Å–ª–∏ —ç—Ç–æ OperationResult<ConcreteType>, –∏–∑–≤–ª–µ–∫–∞–µ–º ConcreteType
            const genericMatch = trimmed.match(/^OperationResult<(.+)>$/);
            if (genericMatch) {
              const innerType = genericMatch[1];
              // –£–±–∏—Ä–∞–µ–º [] –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø
              const cleanType = innerType.replace(/\[\]$/, "");
              if (
                !cleanType.match(
                  /^(string|number|boolean|object|any|Int32|String|Object)$/i
                )
              ) {
                baseTypes.add(cleanType);
              }
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —É–≥–ª–æ–≤—ã—Ö —Å–∫–æ–±–æ–∫: OperationResultTypeName –∏–ª–∏ OperationResultTypeName[]
            else if (trimmed.match(/^OperationResult[A-Z]/)) {
              // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø: OperationResultApiMediaInfo[] -> ApiMediaInfo
              const typeMatch = trimmed.match(
                /^OperationResult([A-Z][a-zA-Z0-9]*)/
              );
              if (typeMatch) {
                const extractedType = typeMatch[1];
                if (!extractedType.match(/^(Int32|String|Object)$/)) {
                  baseTypes.add(extractedType);
                }
              }
            } else if (trimmed.includes("Params") && trimmed.endsWith("Enum")) {
              // –≠—Ç–æ enum –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
              paramsTypes.add(trimmed);
            } else if (trimmed.endsWith("Enum")) {
              // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π enum, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
              enumTypes.add(trimmed);
            } else if (trimmed.endsWith("OperationResult")) {
              // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ OperationResult —Ç–∏–ø—ã - –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ generic
              // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∏–º–ø–æ—Ä—Ç—ã
            } else if (trimmed !== "OperationResult") {
              // –û–±—ã—á–Ω—ã–π —Ç–∏–ø, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
              baseTypes.add(trimmed);
            }
          }
          currentToken = "";
        } else {
          currentToken += char;
        }
      }

      return { baseTypes, enumTypes, paramsTypes };
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º–∏)
    content = content.replace(
      /import\s+(?:type\s*)?\{([^}]+)\}\s+from\s+["']\.\/data-contracts["']/gs,
      (_m, p1) => {
        const { baseTypes, enumTypes, paramsTypes } = parseImports(p1);

        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π OperationResult
        baseTypes.add("OperationResult");

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const allTypes = [
          ...Array.from(baseTypes).sort(),
          ...Array.from(enumTypes).sort(),
          ...Array.from(paramsTypes).sort(),
        ];

        const cleanedImports = allTypes.join(", ");

        return `import type { ${cleanedImports} } from "../types/data-contracts";`;
      }
    );

    // –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ OperationResult –Ω–∞ –æ–±–æ–±—â–µ–Ω–Ω—ã–π
    // –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ —Ç–∏–ø–∞—Ö –≤–æ–∑–≤—Ä–∞—Ç–∞
    content = content.replace(
      /:\s*Promise<HttpResponse<(\w+)(IEnumerable|List|Array)?OperationResult(?!<)/g,
      (match, typeName, collection) => {
        if (collection) {
          return `: Promise<HttpResponse<OperationResult<${typeName}[]>`;
        }
        return `: Promise<HttpResponse<OperationResult<${typeName}>`;
      }
    );

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
    content = content.replace(/\n\s*\n\s*\n/g, "\n\n");
    content = content.replace(/,\s*,/g, ","); // –î–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
    content = content.replace(/,\s*\}/g, "}"); // –ó–∞–ø—è—Ç–∞—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π

    fs.writeFileSync(filePath, content);

    if (importsBefore > 0) {
      console.log(`   ‚úì ${file}: –æ—á–∏—â–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤`);
    }
  });

  console.log("\n‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ http-clients/");
  console.log("   ‚úì –ò–º–ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ–±—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤");
  console.log("   ‚úì –£–¥–∞–ª–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã OperationResult<T> –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function extractExportedTypes(filePath) {
  if (!fs.existsSync(filePath)) {
    return new Set();
  }

  const content = fs.readFileSync(filePath, "utf-8");
  const exportedTypes = new Set();

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
  const patterns = [
    /export\s+interface\s+(\w+)/g,
    /export\s+type\s+(\w+)\s*=/g,
    /export\s+enum\s+(\w+)/g,
    /export\s+class\s+(\w+)/g,
  ];

  patterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(content)) !== null) {
      exportedTypes.add(match[1]);
    }
  });

  return exportedTypes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function removeDuplicateTypes(filePath, typesToRemove) {
  if (!fs.existsSync(filePath) || typesToRemove.size === 0) {
    return;
  }

  let content = fs.readFileSync(filePath, "utf-8");
  let removedCount = 0;

  typesToRemove.forEach(typeName => {
    // –£–¥–∞–ª—è–µ–º interface —Å JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    const interfacePattern = new RegExp(
      `(?:\\/\\*\\*[\\s\\S]*?\\*\\/\\s*)?export\\s+interface\\s+${typeName}\\s*\\{[\\s\\S]*?\\n\\}\\s*`,
      "g"
    );
    const beforeInterface = content;
    content = content.replace(interfacePattern, "");
    if (content !== beforeInterface) removedCount++;

    // –£–¥–∞–ª—è–µ–º enum —Å JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    const enumPattern = new RegExp(
      `(?:\\/\\*\\*[\\s\\S]*?\\*\\/\\s*)?export\\s+enum\\s+${typeName}\\s*\\{[\\s\\S]*?\\n\\}\\s*`,
      "g"
    );
    const beforeEnum = content;
    content = content.replace(enumPattern, "");
    if (content !== beforeEnum) removedCount++;

    // –£–¥–∞–ª—è–µ–º type —Å JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
    const typePattern = new RegExp(
      `(?:\\/\\*\\*[\\s\\S]*?\\*\\/\\s*)?export\\s+type\\s+${typeName}\\s*=[\\s\\S]*?;\\s*`,
      "g"
    );
    const beforeType = content;
    content = content.replace(typePattern, "");
    if (content !== beforeType) removedCount++;
  });

  // –û—á–∏—â–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = content.replace(/\n{3,}/g, "\n\n");

  fs.writeFileSync(filePath, content);
  return removedCount;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ç–∏–ø–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω–µ —Ç–æ–ª—å–∫–æ –∏–º—è)
function extractTypeDefinitions(filePath) {
  if (!fs.existsSync(filePath)) {
    return [];
  }

  const content = fs.readFileSync(filePath, "utf-8");
  const definitions = [];

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
  const patterns = [
    {
      // interface —Å –≤–æ–∑–º–æ–∂–Ω—ã–º JSDoc
      regex: /(?:\/\*\*[\s\S]*?\*\/\s*)?export\s+interface\s+(\w+)[\s\S]*?\n}/g,
      type: "interface",
    },
    {
      // type —Å –≤–æ–∑–º–æ–∂–Ω—ã–º JSDoc
      regex: /(?:\/\*\*[\s\S]*?\*\/\s*)?export\s+type\s+(\w+)\s*=[\s\S]*?;/g,
      type: "type",
    },
    {
      // enum —Å –≤–æ–∑–º–æ–∂–Ω—ã–º JSDoc
      regex: /(?:\/\*\*[\s\S]*?\*\/\s*)?export\s+enum\s+(\w+)\s*\{[\s\S]*?\n}/g,
      type: "enum",
    },
  ];

  patterns.forEach(({ regex, type }) => {
    let match;
    const contentCopy = content;
    regex.lastIndex = 0;
    while ((match = regex.exec(contentCopy)) !== null) {
      definitions.push({
        name: match[1],
        type: type,
        fullDefinition: match[0],
      });
    }
  });

  return definitions;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è SignalR —Ç–∏–ø–æ–≤ –≤ data-contracts
async function mergeSignalRTypesIntoDataContracts() {
  console.log("üì° –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ SignalR —Ç–∏–ø—ã –≤ data-contracts...");

  const swaggerHubsJsonPath = resolve(process.cwd(), "./api/swagger_hubs.json");
  const tempDir = resolve(OUTPUT_DIR_ROOT, ".temp");

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SignalR —Ç–∏–ø—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
  await generateApi({
    input: swaggerHubsJsonPath,
    output: tempDir,
    name: "signalr-temp.ts",
    cleanOutput: true,
    httpClientType: "axios",
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: false, // –¢–æ–ª—å–∫–æ —Ç–∏–ø—ã
    modular: false, // –û–¥–∏–Ω —Ñ–∞–π–ª
    sortTypes: true,
    extractEnums: true,
    codeGenConstructs: constructs => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const hadNull = typeof value === "string" && /\|\s*null\b/.test(value);
        const hadUndefined =
          typeof value === "string" && /\|\s*undefined\b/.test(value);
        let cleaned = String(value)
          .replace(/\s*\|\s*null\b/g, "")
          .replace(/\s*\|\s*undefined\b/g, "")
          .trim();
        const optionalMark = hadNull || hadUndefined ? "?" : "";
        return `${readonly ? "readonly " : ""}${key}${optionalMark}: ${cleaned}`;
      },
    }),
  });

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
  const apiFilePath = resolve(tempDir, "Api.ts");
  const tempSignalrFilePath = resolve(tempDir, "signalr-temp.ts");
  if (fs.existsSync(apiFilePath)) {
    fs.renameSync(apiFilePath, tempSignalrFilePath);
  }

  const dataContractsPath = resolve(OUTPUT_DIR_TYPES, "data-contracts.ts");

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø—ã –∏–∑ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤
  const dataContractsTypes = extractExportedTypes(dataContractsPath);
  const signalrDefinitions = extractTypeDefinitions(tempSignalrFilePath);

  // –ù–∞—Ö–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ data-contracts
  const uniqueSignalRDefinitions = signalrDefinitions.filter(
    def => !dataContractsTypes.has(def.name)
  );

  const duplicateCount =
    signalrDefinitions.length - uniqueSignalRDefinitions.length;

  console.log(
    `   –ù–∞–π–¥–µ–Ω–æ ${signalrDefinitions.length} SignalR —Ç–∏–ø–æ–≤, –∏–∑ –Ω–∏—Ö ${duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`
  );

  if (uniqueSignalRDefinitions.length > 0) {
    console.log(
      `   –î–æ–±–∞–≤–ª—è–µ–º ${uniqueSignalRDefinitions.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö SignalR —Ç–∏–ø–æ–≤ –≤ data-contracts.ts:`
    );
    console.log(
      `   ${uniqueSignalRDefinitions.map(def => def.name).join(", ")}`
    );

    // –ß–∏—Ç–∞–µ–º data-contracts
    let dataContractsContent = fs.readFileSync(dataContractsPath, "utf-8");

    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    const signalRSection = `\n// ========================================\n// SignalR-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∏–ø—ã\n// ========================================\n\n${uniqueSignalRDefinitions.map(def => def.fullDefinition).join("\n\n")}\n`;

    dataContractsContent = dataContractsContent.trimEnd() + signalRSection;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é enum'–æ–≤
    fs.writeFileSync(dataContractsPath, dataContractsContent);
    deduplicateEnums(dataContractsPath);

    console.log("   ‚úì –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ SignalR —Ç–∏–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ data-contracts.ts");
  } else {
    console.log("   ‚úì –í—Å–µ SignalR —Ç–∏–ø—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ data-contracts.ts");
  }

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  fs.rmSync(tempDir, { recursive: true, force: true });
  console.log("   üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã");

  console.log("‚úÖ –í—Å–µ —Ç–∏–ø—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ types/data-contracts.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
function createApiConfig() {
  const apiConfigContent = `/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç VITE_BASE_PATH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export function getApiBaseUrl(): string {
  // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º import.meta.env
  if (typeof window !== "undefined" && typeof import.meta !== "undefined") {
    const basePath = import.meta.env.VITE_BASE_PATH;
    if (basePath) {
      return basePath.replace(/\\/$/, "");
    }
  }

  // –í Node.js –∏—Å–ø–æ–ª—å–∑—É–µ–º process.env
  if (typeof process !== "undefined" && process.env) {
    const basePath = process.env.VITE_BASE_PATH;
    if (basePath) {
      return basePath.replace(/\\/$/, "");
    }
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  return "";
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è API endpoint
 * @param endpoint - –ø—É—Ç—å –∫ endpoint (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/api/commands")
 * @returns –ø–æ–ª–Ω—ã–π URL
 */
export function createApiUrl(endpoint: string): string {
  const baseUrl = getApiBaseUrl();
  const cleanEndpoint = endpoint.startsWith("/") ? endpoint : \`/\${endpoint}\`;

  return \`\${baseUrl}\${cleanEndpoint}\`;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export const defaultApiConfig = {
  baseURL: getApiBaseUrl(),
};
`;

  fs.writeFileSync(resolve(OUTPUT_DIR_ROOT, "api-config.ts"), apiConfigContent);
  console.log("‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ api-config.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
async function generateSignalRClients() {
  console.log(
    "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω React wrapper: react-signalr —Å children props"
  );

  for (const hub of SIGNALR_HUBS) {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–∞–±–∞
    const hubDir = resolve(OUTPUT_DIR_SIGNALR_CLIENTS, `${hub.name}`);
    if (!fs.existsSync(hubDir)) {
      fs.mkdirSync(hubDir, { recursive: true });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ö–∞–±—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ swagger.json
    const hubUrl = hub.path.startsWith("/") ? hub.path.slice(1) : hub.path;

    // –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª - SignalR –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const signalRContextContent = `import { HubConnectionBuilder, IRetryPolicy } from "@microsoft/signalr";

import { logger } from "@/shared/logger";

const policy: IRetryPolicy = { nextRetryDelayInMilliseconds: () => 5000 };

const baseUrl = import.meta.env.VITE_BASE_PATH;

export const ${hub.name}SignalRConnectionBuilder = new HubConnectionBuilder()
  .withUrl(baseUrl + "${hubUrl}")
  .withAutomaticReconnect(policy)
  .configureLogging(logger);
`;

    fs.writeFileSync(
      resolve(hubDir, "SignalRContext.ts"),
      signalRContextContent
    );

    // –í—Ç–æ—Ä–æ–π —Ñ–∞–π–ª - React wrapper
    const reactWrapperContent = `import * as signalR from "react-signalr";

import { logger } from "@/shared/logger";

export const ${hub.name}SignalRContext = signalR.createSignalRContext({});

interface ${hub.name}Props {
  children: React.ReactNode;
}

export function ${hub.name}SignalRHubWrapper({
  children,
}: ${hub.name}Props) {
  return (
    <${hub.name}SignalRContext.Provider
      automaticReconnect={true}
      onError={error => new Promise(resolve => resolve(console.log(error)))}
      onClosed={event => console.log(event)}
      onOpen={event => console.log(event)}
      logger={logger}
      withCredentials={false}
      url={import.meta.env.VITE_BASE_PATH + "${hubUrl}"}
      logMessageContent
    >
      {children}
    </${hub.name}SignalRContext.Provider>
  );
}
`;

    fs.writeFileSync(
      resolve(hubDir, "SignalRHubWrapper.tsx"),
      reactWrapperContent
    );

    console.log(
      `‚úÖ SignalR –∫–ª–∏–µ–Ω—Ç –¥–ª—è ${hub.name} —Å–æ–∑–¥–∞–Ω –≤ signalr-clients/${hub.name}/`
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function createIndexFile() {
  const indexContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
// –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export * from "./api-config";

// –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤ (–≤—Å–µ —Ç–∏–ø—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
export * from "./types/data-contracts";

// –ò–º–ø–æ—Ä—Ç—ã HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤
${CONTROLLERS.map(controller => `export { ${controller} } from "./http-clients/${controller}";`).join("\n")}

// –ò–º–ø–æ—Ä—Ç—ã SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
${SIGNALR_HUBS.map(hub => `export { ${hub.name}SignalRConnectionBuilder } from "./signalr-clients/${hub.name}/SignalRContext";`).join("\n")}
${SIGNALR_HUBS.map(hub => `export { ${hub.name}SignalRContext } from "./signalr-clients/${hub.name}/SignalRHubWrapper";`).join("\n")}
${SIGNALR_HUBS.map(hub => `export { ${hub.name}SignalRHubWrapper } from "./signalr-clients/${hub.name}/SignalRHubWrapper";`).join("\n")}
`;

  fs.writeFileSync(resolve(OUTPUT_DIR_ROOT, "index.ts"), indexContent);
  console.log("‚úÖ –ò–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤)");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Prettier
async function formatGeneratedFiles() {
  console.log("\nüé® –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é Prettier...");

  return new Promise(resolve => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º Prettier –¥–ª—è –ø–∞–ø–∫–∏ api
    const prettierCmd = `yarn prettier --write "src/shared/api/**/*.{ts,tsx}"`;

    exec(prettierCmd, { shell: "powershell.exe" }, (error, stdout, stderr) => {
      if (error) {
        console.warn(
          `‚ö†Ô∏è Prettier –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: ${error.message}`
        );
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        resolve();
        return;
      }

      if (stderr) {
        console.log(`   ${stderr.trim()}`);
      }

      console.log("‚úÖ Prettier —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
      resolve();
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é API —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤...");

    // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É API –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    cleanApiDirectory();

    // –ß–∏—Ç–∞–µ–º swagger —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ —Ö–∞–±–æ–≤
    const swaggerApiJsonPath = resolve(process.cwd(), "./api/swagger_api.json");
    const swaggerHubsJsonPath = resolve(
      process.cwd(),
      "./api/swagger_hubs.json"
    );

    const swaggerApiSource = JSON.parse(fs.readFileSync(swaggerApiJsonPath));
    const swaggerHubsSource = JSON.parse(fs.readFileSync(swaggerHubsJsonPath));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã
    CONTROLLERS = getControllersFromSwagger(swaggerApiSource);
    SIGNALR_HUBS = getSignalRHubsFromSwagger(swaggerHubsSource);

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: ${CONTROLLERS.join(", ")}`);
    console.log(
      `üìã –ù–∞–π–¥–µ–Ω–æ SignalR —Ö–∞–±–æ–≤: ${SIGNALR_HUBS.map(hub => `${hub.name} (${hub.path})`).join(", ")}`
    );

    // –°–æ–∑–¥–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
    createApiConfig();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTTP –∫–ª–∏–µ–Ω—Ç—ã (–æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç data-contracts.ts –≤ http-clients/)
    await generateHttpClients();

    // –ö–æ–ø–∏—Ä—É–µ–º data-contracts –≤ –ø–∞–ø–∫—É types –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤
    await generateDataContracts();

    // –í–ê–ñ–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º SignalR —Ç–∏–ø—ã –≤ data-contracts –ü–û–°–õ–ï –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    await mergeSignalRTypesIntoDataContracts();

    await generateSignalRClients();

    // –ù–µ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤ –≤ ./types

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
    createIndexFile();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é Prettier
    await formatGeneratedFiles();

    console.log("\n" + "=".repeat(60));
    console.log("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    console.log("=".repeat(60));
    console.log("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:");
    console.log("   ‚îú‚îÄ types/");
    console.log("   ‚îÇ  ‚îî‚îÄ data-contracts.ts (–≤—Å–µ —Ç–∏–ø—ã –∏–∑ API –∏ SignalR)");
    console.log("   ‚îú‚îÄ http-clients/ (HTTP –∫–ª–∏–µ–Ω—Ç—ã)");
    console.log("   ‚îú‚îÄ signalr-clients/ (SignalR –∫–ª–∏–µ–Ω—Ç—ã)");
    console.log("   ‚îî‚îÄ index.ts (—ç–∫—Å–ø–æ—Ä—Ç—ã)");

    console.log("\n‚ú® –£–ª—É—á—à–µ–Ω–∏—è:");
    console.log(
      "   ‚úì –í—Å–µ —Ç–∏–ø—ã *OperationResult –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ OperationResult<T>"
    );
    console.log("   ‚úì –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤ –≤ types/data-contracts.ts");
    console.log("   ‚úì –£–ª—É—á—à–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å Generic —Ç–∏–ø–∞–º–∏");
    console.log("   ‚úì HTTP –∏ SignalR –∫–ª–∏–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Ç–∏–ø–æ–≤");
    console.log("   ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–∑ API –∏ Hubs");

    console.log("\nüìù –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
    console.log(
      "   import { OperationResult, AutoMessageDto } from '@/shared/api';"
    );
    console.log(
      "   const response: OperationResult<AutoMessageDto> = await api.get();"
    );
    console.log("   if (response.success && response.data) { ... }");
    console.log("\n" + "=".repeat(60) + "\n");
  } catch (error) {
    console.error("\n" + "=".repeat(60));
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API");
    console.error("=".repeat(60));
    console.error(error);
    console.error("=".repeat(60) + "\n");
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
main();
