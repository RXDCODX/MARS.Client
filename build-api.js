import { resolve } from "path";
import { generateApi } from "swagger-typescript-api";
import process from "process";
import { codegen } from "swagger-axios-codegen";
import fs from "fs";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏–∑ swagger.json
function getControllersFromSwagger(swaggerSource) {
  const controllers = new Set();
  
  Object.keys(swaggerSource.paths).forEach(path => {
    const match = path.match(/^\/api\/([^\/]+)/);
    if (match) {
      controllers.add(match[1]);
    }
  });
  
  return Array.from(controllers);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SignalR —Ö–∞–±–æ–≤ –∏–∑ swagger.json
function getSignalRHubsFromSwagger(swaggerSource) {
  const hubs = new Set();
  
  // –ò—â–µ–º –≤ —Ç–µ–≥–∞—Ö
  if (swaggerSource.tags) {
    swaggerSource.tags.forEach(tag => {
      if (tag.name && tag.name.toLowerCase().includes('hub')) {
        hubs.add(tag.name);
      }
    });
  }
  
  // –ò—â–µ–º –≤ –ø—É—Ç—è—Ö
  Object.keys(swaggerSource.paths).forEach(path => {
    const match = path.match(/\/api\/([^\/]+)/);
    if (match && match[1].toLowerCase().includes('hub')) {
      hubs.add(match[1]);
    }
  });
  
  return Array.from(hubs);
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
let CONTROLLERS = [];
let SIGNALR_HUBS = [];

const OUTPUT_DIR = resolve(process.cwd(), "./src/shared/api/generated/");

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
async function generateTypes() {
  const params = {
    input: resolve(process.cwd(), "./api/swagger.json"),
    output: OUTPUT_DIR,
    name: "Api.ts",
    cleanOutput: false,
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: true, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏
    sortTypes: true,
    extractEnums: true,
    codeGenConstructs: (constructs) => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const finalValue = value.includes(" | null")
          ? value.replace(" | null", " | undefined")
          : value;
        return [...(readonly ? ["readonly "] : []), key, ": ", finalValue].join("");
      },
    }),
  };

  await generateApi(params);
  
  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ types.ts (—Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã)
  const apiPath = resolve(OUTPUT_DIR, "Api.ts");
  const typesPath = resolve(OUTPUT_DIR, "types.ts");
  if (fs.existsSync(apiPath)) {
    const content = fs.readFileSync(apiPath, "utf-8");
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã (–¥–æ –∫–ª–∞—Å—Å–∞ Api)
    const typesMatch = content.match(/(.*?)(export class Api)/s);
    if (typesMatch) {
      fs.writeFileSync(typesPath, typesMatch[1]);
    } else {
      fs.writeFileSync(typesPath, content);
    }
  }
  
  console.log("‚úÖ –¢–∏–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ types.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SignalR —Ç–∏–ø–æ–≤
async function generateSignalRTypes() {
  const params = {
    input: resolve(process.cwd(), "./api/swagger.json"),
    output: OUTPUT_DIR,
    name: "SignalRApi.ts",
    cleanOutput: false,
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: false,
    sortTypes: true,
    extractEnums: true,
    templates: resolve(process.cwd(), "./api/signalr-templates"), // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    codeGenConstructs: (constructs) => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const finalValue = value.includes(" | null")
          ? value.replace(" | null", " | undefined")
          : value;
        return [...(readonly ? ["readonly "] : []), key, ": ", finalValue].join("");
      },
    }),
  };

  await generateApi(params);
  
  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ signalr_types.ts
  const signalrApiPath = resolve(OUTPUT_DIR, "SignalRApi.ts");
  const signalrTypesPath = resolve(OUTPUT_DIR, "signalr_types.ts");
  if (fs.existsSync(signalrApiPath)) {
    const content = fs.readFileSync(signalrApiPath, "utf-8");
    fs.writeFileSync(signalrTypesPath, content);
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(signalrApiPath);
  }
  
  console.log("‚úÖ SignalR —Ç–∏–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ signalr_types.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º
async function generateControllerClients() {
  for (const controller of CONTROLLERS) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É –Ω–∞–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
    const controllerContent = `// –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ ${controller}
import { HttpClient } from './types';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
export class ${controller}Service {
  private httpClient: HttpClient;

  constructor(baseURL?: string) {
    this.httpClient = new HttpClient({ baseUrl: baseURL });
  }

  // –ú–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
  getHttpClient() {
    return this.httpClient;
  }
}
`;

    fs.writeFileSync(resolve(OUTPUT_DIR, `${controller.toLowerCase()}-client.ts`), controllerContent);
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–ª—è ${controller} —Å–æ–∑–¥–∞–Ω –≤ ${controller.toLowerCase()}-client.ts`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
async function generateSignalRClients() {
  for (const hub of SIGNALR_HUBS) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è SignalR —Ö–∞–±–∞
    const hubContent = `// SignalR –∫–ª–∏–µ–Ω—Ç –¥–ª—è ${hub}
import { HttpClient } from './types';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ö–∞–±–∞
export class ${hub}Service {
  private httpClient: HttpClient;

  constructor(baseURL?: string) {
    this.httpClient = new HttpClient({ baseUrl: baseURL });
  }

  // SignalR –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
  getHttpClient() {
    return this.httpClient;
  }
}
`;

    fs.writeFileSync(resolve(OUTPUT_DIR, `${hub.toLowerCase()}-client.ts`), hubContent);
    console.log(`‚úÖ SignalR –∫–ª–∏–µ–Ω—Ç –¥–ª—è ${hub} —Å–æ–∑–¥–∞–Ω –≤ ${hub.toLowerCase()}-client.ts`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ axios –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function generateMainAxiosClient() {
  const swaggerJsonPath = resolve(process.cwd(), "./api/swagger.json");
  const swaggerSource = JSON.parse(fs.readFileSync(swaggerJsonPath, "utf-8"));

  await codegen({
    methodNameMode: "operationId",
    source: swaggerSource,
    outputDir: OUTPUT_DIR,
    fileName: "axios-client.ts",
    useStaticMethod: true,
    modelMode: "interface",
    strictNullChecks: true,
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
  });

  console.log("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π axios –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ axios-client.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function createIndexFile() {
  const indexContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
// –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤
export * from './types';
export * from './signalr_types';

// –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
${CONTROLLERS.map(controller => `export { ${controller}Service } from './${controller.toLowerCase()}-client';`).join('\n')}

// –ò–º–ø–æ—Ä—Ç—ã SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
${SIGNALR_HUBS.map(hub => `export { ${hub}Service } from './${hub.toLowerCase()}-client';`).join('\n')}

// –û—Å–Ω–æ–≤–Ω–æ–π HTTP –∫–ª–∏–µ–Ω—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export { HttpClient } from './types';
`;

  fs.writeFileSync(resolve(OUTPUT_DIR, 'index.ts'), indexContent);
  console.log("‚úÖ –ò–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω");
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é API...");
    
    // –ß–∏—Ç–∞–µ–º swagger.json –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ —Ö–∞–±–æ–≤
    const swaggerJsonPath = resolve(process.cwd(), "./api/swagger.json");
    const swaggerSource = JSON.parse(fs.readFileSync(swaggerJsonPath, "utf-8"));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã
    CONTROLLERS = getControllersFromSwagger(swaggerSource);
    SIGNALR_HUBS = getSignalRHubsFromSwagger(swaggerSource);
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: ${CONTROLLERS.join(', ')}`);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ SignalR —Ö–∞–±–æ–≤: ${SIGNALR_HUBS.join(', ')}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã
    await generateTypes();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SignalR —Ç–∏–ø—ã
    await generateSignalRTypes();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π axios –∫–ª–∏–µ–Ω—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    await generateMainAxiosClient();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    await generateControllerClients();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SignalR –∫–ª–∏–µ–Ω—Ç—ã
    await generateSignalRClients();
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
    createIndexFile();
    
    console.log("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
main();
