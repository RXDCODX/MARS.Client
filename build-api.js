import fs from "fs";
import { resolve } from "path";
import process from "process";
import { generateApi } from "swagger-typescript-api";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏–∑ swagger.json
function getControllersFromSwagger(swaggerSource) {
  const controllers = new Set();

  Object.keys(swaggerSource.paths).forEach(path => {
    const match = path.match(/^\/api\/([^\\/]+)/);
    if (match) {
      controllers.add(match[1]);
    }
  });

  return Array.from(controllers);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SignalR —Ö–∞–±–æ–≤ –∏–∑ swagger.json
function getSignalRHubsFromSwagger(swaggerSource) {
  const hubPaths = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ö–∞–±—É

  // –ò—â–µ–º –≤ –ø—É—Ç—è—Ö
  Object.keys(swaggerSource.paths).forEach(path => {
    const pathData = swaggerSource.paths[path];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—É—Ç–∏
    Object.values(pathData).forEach(methodData => {
      if (methodData.tags && Array.isArray(methodData.tags)) {
        methodData.tags.forEach(tag => {
          if (tag && tag.toLowerCase().includes("hub")) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ —Ö–∞–±—É
            let hubPath;

            if (path.startsWith("/hubs/")) {
              // –î–ª—è –ø—É—Ç–µ–π –≤–∏–¥–∞ /hubs/HubName/...
              const hubName = path.split("/")[2];
              hubPath = `/hubs/${hubName}`;
            } else if (path.startsWith("/") && !path.startsWith("/api/")) {
              // –î–ª—è –ø—É—Ç–µ–π –≤–∏–¥–∞ /hubname/...
              const hubName = path.split("/")[1];
              hubPath = `/${hubName}`;
            }

            if (hubPath) {
              hubPaths.set(tag, hubPath);
            }
          }
        });
      }
    });
  });

  return Array.from(hubPaths.entries()).map(([hubName, hubPath]) => ({
    name: hubName,
    path: hubPath,
  }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ swagger.json –±–µ–∑ SignalR —Ö–∞–±–æ–≤
function createFilteredSwagger(swaggerSource) {
  const filteredSwagger = { ...swaggerSource };

  // –£–¥–∞–ª—è–µ–º –ø—É—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å SignalR —Ö–∞–±–∞–º–∏
  const pathsToRemove = [];

  Object.keys(filteredSwagger.paths).forEach(path => {
    const pathData = filteredSwagger.paths[path];
    let shouldRemove = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—É—Ç–∏
    Object.values(pathData).forEach(methodData => {
      if (methodData.tags && Array.isArray(methodData.tags)) {
        methodData.tags.forEach(tag => {
          if (tag && tag.toLowerCase().includes("hub")) {
            shouldRemove = true;
          }
        });
      }
    });

    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /api/
    if (!path.startsWith("/api/")) {
      shouldRemove = true;
    }

    if (shouldRemove) {
      pathsToRemove.push(path);
    }
  });

  // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
  pathsToRemove.forEach(path => {
    delete filteredSwagger.paths[path];
  });

  return filteredSwagger;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
let CONTROLLERS = [];
let SIGNALR_HUBS = [];

const OUTPUT_DIR = resolve(process.cwd(), "./src/shared/api/");

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
async function generateTypes() {
  // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π swagger –±–µ–∑ SignalR —Ö–∞–±–æ–≤
  const swaggerJsonPath = resolve(process.cwd(), "./api/swagger.json");
  const swaggerSource = JSON.parse(fs.readFileSync(swaggerJsonPath, "utf-8"));
  const filteredSwagger = createFilteredSwagger(swaggerSource);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π swagger –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  const tempSwaggerPath = resolve(process.cwd(), "./api/swagger-filtered.json");
  fs.writeFileSync(tempSwaggerPath, JSON.stringify(filteredSwagger, null, 2));

  const params = {
    input: tempSwaggerPath,
    output: OUTPUT_DIR,
    name: "Api.ts",
    cleanOutput: false,
    httpClientType: "axios",
    prettier: {
      trailingComma: "all",
      tabWidth: 4,
      printWidth: 160,
    },
    generateClient: true, // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏
    modular: true,
    moduleNameFirstTag: true,
    sortTypes: true,
    extractEnums: true,
    codeGenConstructs: constructs => ({
      ...constructs,
      NullValue: () => "undefined",
      TypeField: ({ readonly, key, value }) => {
        const finalValue = value.includes(" | null")
          ? value.replace(" | null", " | undefined")
          : value;
        return [...(readonly ? ["readonly "] : []), key, ": ", finalValue].join(
          ""
        );
      },
    }),
  };

  await generateApi(params);

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.unlinkSync(tempSwaggerPath);

  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ types.ts (—Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã)
  const apiPath = resolve(OUTPUT_DIR, "Api.ts");
  const typesPath = resolve(OUTPUT_DIR, "types.ts");
  if (fs.existsSync(apiPath)) {
    const content = fs.readFileSync(apiPath, "utf-8");
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã (–¥–æ –∫–ª–∞—Å—Å–∞ Api)
    const typesMatch = content.match(/(.*?)(export class Api)/s);
    if (typesMatch) {
      fs.writeFileSync(typesPath, typesMatch[1]);
    } else {
      fs.writeFileSync(typesPath, content);
    }
  }

  console.log("‚úÖ –¢–∏–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ types.ts —Å –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
function createApiConfig() {
  const apiConfigContent = `/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç VITE_BASE_PATH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
export function getApiBaseUrl(): string {
  // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º import.meta.env
  if (typeof window !== "undefined" && typeof import.meta !== "undefined") {
    const basePath = import.meta.env.VITE_BASE_PATH;
    if (basePath) {
      return basePath.replace(/\\/$/, "");
    }
  }
  
  // –í Node.js –∏—Å–ø–æ–ª—å–∑—É–µ–º process.env
  if (typeof process !== "undefined" && process.env) {
    const basePath = process.env.VITE_BASE_PATH;
    if (basePath) {
      return basePath.replace(/\\/$/, "");
    }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  return "";
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è API endpoint
 * @param endpoint - –ø—É—Ç—å –∫ endpoint (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/api/commands")
 * @returns –ø–æ–ª–Ω—ã–π URL
 */
export function createApiUrl(endpoint: string): string {
  const baseUrl = getApiBaseUrl();
  const cleanEndpoint = endpoint.startsWith("/") ? endpoint : \`/\${endpoint}\`;
  
  return \`\${baseUrl}\${cleanEndpoint}\`;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
export const defaultApiConfig = {
  baseURL: getApiBaseUrl(),
};
`;

  fs.writeFileSync(resolve(OUTPUT_DIR, "api-config.ts"), apiConfigContent);
  console.log("‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ api-config.ts");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
async function generateSignalRClients() {
  console.log(
    "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω React wrapper: react-signalr —Å children props"
  );

  for (const hub of SIGNALR_HUBS) {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–∞–±–∞
    const hubDir = resolve(OUTPUT_DIR, `SignalR/${hub.name}`);
    if (!fs.existsSync(hubDir)) {
      fs.mkdirSync(hubDir, { recursive: true });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ö–∞–±—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ swagger.json
    const hubUrl = hub.path;

    // –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª - SignalR –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const signalRContextContent = `import { HubConnectionBuilder, IRetryPolicy } from "@microsoft/signalr";

import { logger } from "@/shared/logger";

const policy: IRetryPolicy = { nextRetryDelayInMilliseconds: () => 5000 };

const baseUrl = import.meta.env.VITE_BASE_PATH;

export const ${hub.name}SignalRContext = new HubConnectionBuilder()
  .withUrl(baseUrl + "${hubUrl}")
  .withAutomaticReconnect(policy)
  .configureLogging(logger);
`;

    fs.writeFileSync(
      resolve(hubDir, "SignalRContext.ts"),
      signalRContextContent
    );

    // –í—Ç–æ—Ä–æ–π —Ñ–∞–π–ª - React wrapper
    const reactWrapperContent = `import * as signalR from "react-signalr";

import { logger } from "@/shared/logger";

const SignalRContext = signalR.createSignalRContext({});

interface ${hub.name}Props {
  children: React.ReactNode;
}

export default function ${hub.name}SignalRHubWrapper({
  children,
}: ${hub.name}Props) {
  return (
    <SignalRContext.Provider
      automaticReconnect={true}
      onError={error => new Promise(resolve => resolve(console.log(error)))}
      onClosed={event => console.log(event)}
      onOpen={event => console.log(event)}
      logger={logger}
      withCredentials={false}
      url={import.meta.env.VITE_BASE_PATH + "${hubUrl}"}
      logMessageContent
    >
      {children}
    </SignalRContext.Provider>
  );
}
`;

    fs.writeFileSync(
      resolve(hubDir, "SignalRHubWrapper.tsx"),
      reactWrapperContent
    );

    console.log(
      `‚úÖ SignalR –∫–ª–∏–µ–Ω—Ç –¥–ª—è ${hub.name} —Å–æ–∑–¥–∞–Ω –≤ SignalR/${hub.name}/`
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function createIndexFile() {
  const indexContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
// –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤
export * from "./axios-client";

// –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export * from "./api-config";

// –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
${CONTROLLERS.map(controller => `export { ${controller} } from "./${controller}";`).join("\n")}

// –ò–º–ø–æ—Ä—Ç—ã SignalR –∫–ª–∏–µ–Ω—Ç–æ–≤
${SIGNALR_HUBS.map(hub => `export { ${hub.name}SignalRContext } from "./SignalR/${hub.name}/SignalRContext";`).join("\n")}
${SIGNALR_HUBS.map(hub => `export { default as ${hub.name}SignalRHubWrapper } from "./SignalR/${hub.name}/SignalRHubWrapper";`).join("\n")}
`;

  fs.writeFileSync(resolve(OUTPUT_DIR, "index.ts"), indexContent);
  console.log("‚úÖ –ò–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω");
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é API...");

    // –ß–∏—Ç–∞–µ–º swagger.json –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏ —Ö–∞–±–æ–≤
    const swaggerJsonPath = resolve(process.cwd(), "./api/swagger.json");
    const swaggerSource = JSON.parse(fs.readFileSync(swaggerJsonPath, "utf-8"));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —Ö–∞–±—ã
    CONTROLLERS = getControllersFromSwagger(swaggerSource);
    SIGNALR_HUBS = getSignalRHubsFromSwagger(swaggerSource);

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: ${CONTROLLERS.join(", ")}`);
    console.log(
      `üìã –ù–∞–π–¥–µ–Ω–æ SignalR —Ö–∞–±–æ–≤: ${SIGNALR_HUBS.map(hub => `${hub.name} (${hub.path})`).join(", ")}`
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã
    await generateTypes();

    // –°–æ–∑–¥–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
    createApiConfig();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SignalR –∫–ª–∏–µ–Ω—Ç—ã
    await generateSignalRClients();

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
    createIndexFile();

    console.log("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ API:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
main();
